# Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

# typed: true
# frozen_string_literal: true

require 'sorbet-runtime'
require 'faraday'
require_relative '../shared/fileresource'

module OpenApiSDK
  module Operations

    class CreateFileRequestBodyFile < OpenApiSDK::Utils::FieldAugmented
      extend T::Sig


      field :content, String, { 'multipart_form': { 'content': true } }

      field :file, String, { 'multipart_form': { 'field_name': 'file' } }


      sig { params(content: String, file: String).void }
      def initialize(content: nil, file: nil)
        @content = content
        @file = file
      end
    end


    class CreateFileRequestBody < OpenApiSDK::Utils::FieldAugmented
      extend T::Sig


      field :file, T.nilable(Operations::CreateFileRequestBodyFile), { 'multipart_form': { 'file': true } }


      sig { params(file: T.nilable(Operations::CreateFileRequestBodyFile)).void }
      def initialize(file: nil)
        @file = file
      end
    end


    class CreateFileResponse < OpenApiSDK::Utils::FieldAugmented
      extend T::Sig

      # HTTP response content type for this operation
      field :content_type, String
      # HTTP response status code for this operation
      field :status_code, Integer
      # OK
      field :file_resource, T.nilable(Shared::FileResource)
      # Raw HTTP response; suitable for custom response parsing
      field :raw_response, T.nilable(Faraday::Response)


      sig { params(content_type: String, status_code: Integer, file_resource: T.nilable(Shared::FileResource), raw_response: T.nilable(Faraday::Response)).void }
      def initialize(content_type: nil, status_code: nil, file_resource: nil, raw_response: nil)
        @content_type = content_type
        @status_code = status_code
        @file_resource = file_resource
        @raw_response = raw_response
      end
    end
  end
end
