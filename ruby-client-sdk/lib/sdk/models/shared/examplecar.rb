# Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

# typed: true
# frozen_string_literal: true

require 'sorbet-runtime'
require 'faraday'

module OpenApiSDK
  module Shared

    class ExampleCarType < T::Enum
      enums do
        CAR = new('car')
      end
    end



    class ExampleCar < OpenApiSDK::Utils::FieldAugmented
      extend T::Sig


      field :make, String, { 'format_json': { 'letter_case': OpenApiSDK::Utils.field_name('make') } }

      field :model, String, { 'format_json': { 'letter_case': OpenApiSDK::Utils.field_name('model') } }

      field :name, String, { 'format_json': { 'letter_case': OpenApiSDK::Utils.field_name('name') } }

      field :type, Shared::ExampleCarType, { 'format_json': { 'letter_case': OpenApiSDK::Utils.field_name('type'), 'decoder': Utils.enum_from_string(Shared::ExampleCarType, false) } }

      field :year, Float, { 'format_json': { 'letter_case': OpenApiSDK::Utils.field_name('year') } }

      field :created_at, T.nilable(DateTime), { 'format_json': { 'letter_case': OpenApiSDK::Utils.field_name('createdAt'), 'decoder': Utils.datetime_from_iso_format(true) } }

      field :updated_at, T.nilable(DateTime), { 'format_json': { 'letter_case': OpenApiSDK::Utils.field_name('updatedAt'), 'decoder': Utils.datetime_from_iso_format(true) } }


      sig { params(make: String, model: String, name: String, type: Shared::ExampleCarType, year: Float, created_at: T.nilable(DateTime), updated_at: T.nilable(DateTime)).void }
      def initialize(make: nil, model: nil, name: nil, type: nil, year: nil, created_at: nil, updated_at: nil)
        @make = make
        @model = model
        @name = name
        @type = type
        @year = year
        @created_at = created_at
        @updated_at = updated_at
      end
    end
  end
end
