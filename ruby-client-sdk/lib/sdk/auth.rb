# Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

# typed: true
# frozen_string_literal: true

require 'faraday'
require 'faraday/multipart'
require 'sorbet-runtime'

module OpenApiSDK
  extend T::Sig
  class Auth
    extend T::Sig
    sig { params(sdk: OpenApiSDK::SDK, client: Faraday::Connection, server_url: String, language: String, sdk_version: String, gen_version: String, openapi_doc_version: String, gbls: T::Hash[Symbol, T::Hash[Symbol, T::Hash[Symbol, Object]]]).void }
    def initialize(sdk, client, server_url, language, sdk_version, gen_version, openapi_doc_version, gbls)
      @sdk = sdk
      @client = client
      @server_url = server_url
      @language = language
      @sdk_version = sdk_version
      @gen_version = gen_version
      @openapi_doc_version = openapi_doc_version
      @globals = gbls
    end

    sig { params(security: Operations::ApiKeyAuthSecurity).returns(Utils::FieldAugmented) }
    def api_key_auth(security)

      base_url = @server_url
      url = "#{base_url.delete_suffix('/')}/bearer#operation"
      headers = {}
      headers['Accept'] = 'application/json'
      headers['x-speakeasy-user-agent'] = "speakeasy-sdk/#{@language} #{@sdk_version} #{@gen_version} #{@openapi_doc_version}"

      r = @client.get(url) do |req|
        req.headers = headers
        Utils.configure_request_security(req, security) if !security.nil?
      end

      content_type = r.headers.fetch('Content-Type', 'application/octet-stream')

      res = Operations::ApiKeyAuthResponse.new(
        status_code: r.status, content_type: content_type, raw_response: r
      )
      if r.status == 200
        if Utils.match_content_type(content_type, 'application/json')
          out = Utils.unmarshal_complex(r.env.response_body, Operations::ApiKeyAuthToken)
          res.token = out
        end
      elsif r.status == 401
      end
      res
    end

    sig { returns(Utils::FieldAugmented) }
    def api_key_auth_global

      base_url = @server_url
      url = "#{base_url.delete_suffix('/')}/bearer"
      headers = {}
      headers['Accept'] = 'application/json'
      headers['x-speakeasy-user-agent'] = "speakeasy-sdk/#{@language} #{@sdk_version} #{@gen_version} #{@openapi_doc_version}"

      r = @client.get(url) do |req|
        req.headers = headers
        Utils.configure_request_security(req, @sdk.security) if !@sdk.nil? && !@sdk.security.nil?
      end

      content_type = r.headers.fetch('Content-Type', 'application/octet-stream')

      res = Operations::ApiKeyAuthGlobalResponse.new(
        status_code: r.status, content_type: content_type, raw_response: r
      )
      if r.status == 200
        if Utils.match_content_type(content_type, 'application/json')
          out = Utils.unmarshal_complex(r.env.response_body, Operations::ApiKeyAuthGlobalToken)
          res.token = out
        end
      elsif r.status == 401
      end
      res
    end

    sig { params(security: Operations::BasicAuthSecurity, passwd: String, user: String).returns(Utils::FieldAugmented) }
    def basic_auth(security, passwd, user)

      request = Operations::BasicAuthRequest.new(
        passwd: passwd,
        user: user
      )
      base_url = @server_url
      url = Utils.generate_url(
        Operations::BasicAuthRequest,
        base_url,
        '/basic-auth/{user}/{passwd}',
        request,
        @globals
      )
      headers = {}
      headers['Accept'] = 'application/json'
      headers['x-speakeasy-user-agent'] = "speakeasy-sdk/#{@language} #{@sdk_version} #{@gen_version} #{@openapi_doc_version}"

      r = @client.get(url) do |req|
        req.headers = headers
        Utils.configure_request_security(req, security) if !security.nil?
      end

      content_type = r.headers.fetch('Content-Type', 'application/octet-stream')

      res = Operations::BasicAuthResponse.new(
        status_code: r.status, content_type: content_type, raw_response: r
      )
      if r.status == 200
        if Utils.match_content_type(content_type, 'application/json')
          out = Utils.unmarshal_complex(r.env.response_body, Operations::BasicAuthUser)
          res.user = out
        end
      elsif r.status == 401
      end
      res
    end

    sig { params(security: Operations::BearerAuthSecurity).returns(Utils::FieldAugmented) }
    def bearer_auth(security)

      base_url = @server_url
      url = "#{base_url.delete_suffix('/')}/bearer#bearer"
      headers = {}
      headers['Accept'] = 'application/json'
      headers['x-speakeasy-user-agent'] = "speakeasy-sdk/#{@language} #{@sdk_version} #{@gen_version} #{@openapi_doc_version}"

      r = @client.get(url) do |req|
        req.headers = headers
        Utils.configure_request_security(req, security) if !security.nil?
      end

      content_type = r.headers.fetch('Content-Type', 'application/octet-stream')

      res = Operations::BearerAuthResponse.new(
        status_code: r.status, content_type: content_type, raw_response: r
      )
      if r.status == 200
        if Utils.match_content_type(content_type, 'application/json')
          out = Utils.unmarshal_complex(r.env.response_body, Operations::BearerAuthToken)
          res.token = out
        end
      elsif r.status == 401
      end
      res
    end

    sig { params(security: Operations::Oauth2AuthSecurity).returns(Utils::FieldAugmented) }
    def oauth2_auth(security)

      base_url = @server_url
      url = "#{base_url.delete_suffix('/')}/bearer#oauth2"
      headers = {}
      headers['Accept'] = 'application/json'
      headers['x-speakeasy-user-agent'] = "speakeasy-sdk/#{@language} #{@sdk_version} #{@gen_version} #{@openapi_doc_version}"

      r = @client.get(url) do |req|
        req.headers = headers
        Utils.configure_request_security(req, security) if !security.nil?
      end

      content_type = r.headers.fetch('Content-Type', 'application/octet-stream')

      res = Operations::Oauth2AuthResponse.new(
        status_code: r.status, content_type: content_type, raw_response: r
      )
      if r.status == 200
        if Utils.match_content_type(content_type, 'application/json')
          out = Utils.unmarshal_complex(r.env.response_body, Operations::Oauth2AuthToken)
          res.token = out
        end
      elsif r.status == 401
      end
      res
    end

    sig { params(security: Operations::OpenIdConnectAuthSecurity).returns(Utils::FieldAugmented) }
    def open_id_connect_auth(security)

      base_url = @server_url
      url = "#{base_url.delete_suffix('/')}/bearer#openIdConnect"
      headers = {}
      headers['Accept'] = 'application/json'
      headers['x-speakeasy-user-agent'] = "speakeasy-sdk/#{@language} #{@sdk_version} #{@gen_version} #{@openapi_doc_version}"

      r = @client.get(url) do |req|
        req.headers = headers
        Utils.configure_request_security(req, security) if !security.nil?
      end

      content_type = r.headers.fetch('Content-Type', 'application/octet-stream')

      res = Operations::OpenIdConnectAuthResponse.new(
        status_code: r.status, content_type: content_type, raw_response: r
      )
      if r.status == 200
        if Utils.match_content_type(content_type, 'application/json')
          out = Utils.unmarshal_complex(r.env.response_body, Operations::OpenIdConnectAuthToken)
          res.token = out
        end
      elsif r.status == 401
      end
      res
    end
  end
end
