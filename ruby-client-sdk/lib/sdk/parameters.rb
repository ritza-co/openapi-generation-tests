# Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

# typed: true
# frozen_string_literal: true

require 'faraday'
require 'faraday/multipart'
require 'sorbet-runtime'

module OpenApiSDK
  extend T::Sig
  class Parameters
    extend T::Sig
    sig { params(sdk: OpenApiSDK::SDK, client: Faraday::Connection, server_url: String, sdk_version: String, gen_version: String, gbls: T::Hash[Symbol, T::Hash[Symbol, T::Hash[Symbol, Object]]]).void }
    def initialize(sdk, client, server_url, sdk_version, gen_version, gbls)
      @sdk = sdk
      @client = client
      @server_url = server_url
      @sdk_version = sdk_version
      @gen_version = gen_version
      @globals = gbls
    end

    sig { params(request: Operations::DeepObjectQueryParamsMapRequest).returns(Utils::FieldAugmented) }
    def deep_object_query_params_map(request)

      base_url = @server_url
      url = "#{base_url.delete_suffix('/')}/anything/queryParams/deepObject/map"
      query_params = Utils.get_query_params(Operations::DeepObjectQueryParamsMapRequest, request, @globals)

      r = @client.get(url) do |req|
        req.params = query_params
        Utils.configure_request_security(req, @sdk.security) if !@sdk.nil? && !@sdk.security.nil?
      end

      content_type = r.headers.fetch('Content-Type', 'application/octet-stream')

      res = Operations::DeepObjectQueryParamsMapResponse.new(
        status_code: r.status, content_type: content_type, raw_response: r
      )
      if r.status == 200
        if Utils.match_content_type(content_type, 'application/json')
          out = Utils.unmarshal_complex(r.env.response_body, Operations::DeepObjectQueryParamsMapRes)
          res.res = out
        end
      end
      res
    end

    sig { params(request: Operations::DeepObjectQueryParamsObjectRequest).returns(Utils::FieldAugmented) }
    def deep_object_query_params_object(request)

      base_url = @server_url
      url = "#{base_url.delete_suffix('/')}/anything/queryParams/deepObject/obj"
      query_params = Utils.get_query_params(Operations::DeepObjectQueryParamsObjectRequest, request, @globals)

      r = @client.get(url) do |req|
        req.params = query_params
        Utils.configure_request_security(req, @sdk.security) if !@sdk.nil? && !@sdk.security.nil?
      end

      content_type = r.headers.fetch('Content-Type', 'application/octet-stream')

      res = Operations::DeepObjectQueryParamsObjectResponse.new(
        status_code: r.status, content_type: content_type, raw_response: r
      )
      if r.status == 200
        if Utils.match_content_type(content_type, 'application/json')
          out = Utils.unmarshal_complex(r.env.response_body, Operations::DeepObjectQueryParamsObjectRes)
          res.res = out
        end
      end
      res
    end

    sig { params(request: Operations::FormQueryParamsArrayRequest).returns(Utils::FieldAugmented) }
    def form_query_params_array(request)

      base_url = @server_url
      url = "#{base_url.delete_suffix('/')}/anything/queryParams/form/array"
      query_params = Utils.get_query_params(Operations::FormQueryParamsArrayRequest, request, @globals)

      r = @client.get(url) do |req|
        req.params = query_params
        Utils.configure_request_security(req, @sdk.security) if !@sdk.nil? && !@sdk.security.nil?
      end

      content_type = r.headers.fetch('Content-Type', 'application/octet-stream')

      res = Operations::FormQueryParamsArrayResponse.new(
        status_code: r.status, content_type: content_type, raw_response: r
      )
      if r.status == 200
        if Utils.match_content_type(content_type, 'application/json')
          out = Utils.unmarshal_complex(r.env.response_body, Operations::FormQueryParamsArrayRes)
          res.res = out
        end
      end
      res
    end

    sig { params(request: Operations::FormQueryParamsMapRequest).returns(Utils::FieldAugmented) }
    def form_query_params_map(request)

      base_url = @server_url
      url = "#{base_url.delete_suffix('/')}/anything/queryParams/form/map"
      query_params = Utils.get_query_params(Operations::FormQueryParamsMapRequest, request, @globals)

      r = @client.get(url) do |req|
        req.params = query_params
        Utils.configure_request_security(req, @sdk.security) if !@sdk.nil? && !@sdk.security.nil?
      end

      content_type = r.headers.fetch('Content-Type', 'application/octet-stream')

      res = Operations::FormQueryParamsMapResponse.new(
        status_code: r.status, content_type: content_type, raw_response: r
      )
      if r.status == 200
        if Utils.match_content_type(content_type, 'application/json')
          out = Utils.unmarshal_complex(r.env.response_body, Operations::FormQueryParamsMapRes)
          res.res = out
        end
      end
      res
    end

    sig { params(request: Operations::FormQueryParamsObjectRequest).returns(Utils::FieldAugmented) }
    def form_query_params_object(request)

      base_url = @server_url
      url = "#{base_url.delete_suffix('/')}/anything/queryParams/form/obj"
      query_params = Utils.get_query_params(Operations::FormQueryParamsObjectRequest, request, @globals)

      r = @client.get(url) do |req|
        req.params = query_params
        Utils.configure_request_security(req, @sdk.security) if !@sdk.nil? && !@sdk.security.nil?
      end

      content_type = r.headers.fetch('Content-Type', 'application/octet-stream')

      res = Operations::FormQueryParamsObjectResponse.new(
        status_code: r.status, content_type: content_type, raw_response: r
      )
      if r.status == 200
        if Utils.match_content_type(content_type, 'application/json')
          out = Utils.unmarshal_complex(r.env.response_body, Operations::FormQueryParamsObjectRes)
          res.res = out
        end
      end
      res
    end

    sig { params(request: Operations::FormQueryParamsPrimitiveRequest).returns(Utils::FieldAugmented) }
    def form_query_params_primitive(request)

      base_url = @server_url
      url = "#{base_url.delete_suffix('/')}/anything/queryParams/form/primitive"
      query_params = Utils.get_query_params(Operations::FormQueryParamsPrimitiveRequest, request, @globals)

      r = @client.get(url) do |req|
        req.params = query_params
        Utils.configure_request_security(req, @sdk.security) if !@sdk.nil? && !@sdk.security.nil?
      end

      content_type = r.headers.fetch('Content-Type', 'application/octet-stream')

      res = Operations::FormQueryParamsPrimitiveResponse.new(
        status_code: r.status, content_type: content_type, raw_response: r
      )
      if r.status == 200
        if Utils.match_content_type(content_type, 'application/json')
          out = Utils.unmarshal_complex(r.env.response_body, Operations::FormQueryParamsPrimitiveRes)
          res.res = out
        end
      end
      res
    end

    sig { params(request: Operations::FormQueryParamsRefParamObjectRequest).returns(Utils::FieldAugmented) }
    def form_query_params_ref_param_object(request)

      base_url = @server_url
      url = "#{base_url.delete_suffix('/')}/anything/queryParams/form/refParamObject"
      query_params = Utils.get_query_params(Operations::FormQueryParamsRefParamObjectRequest, request, @globals)

      r = @client.get(url) do |req|
        req.params = query_params
        Utils.configure_request_security(req, @sdk.security) if !@sdk.nil? && !@sdk.security.nil?
      end

      content_type = r.headers.fetch('Content-Type', 'application/octet-stream')

      res = Operations::FormQueryParamsRefParamObjectResponse.new(
        status_code: r.status, content_type: content_type, raw_response: r
      )
      if r.status == 200
        if Utils.match_content_type(content_type, 'application/json')
          out = Utils.unmarshal_complex(r.env.response_body, Operations::FormQueryParamsRefParamObjectRes)
          res.res = out
        end
      end
      res
    end

    sig { params(request: Operations::HeaderParamsArrayRequest).returns(Utils::FieldAugmented) }
    def header_params_array(request)

      base_url = @server_url
      url = "#{base_url.delete_suffix('/')}/anything/headers/array"
      headers = Utils.get_headers(request)

      r = @client.get(url) do |req|
        req.headers = headers
        Utils.configure_request_security(req, @sdk.security) if !@sdk.nil? && !@sdk.security.nil?
      end

      content_type = r.headers.fetch('Content-Type', 'application/octet-stream')

      res = Operations::HeaderParamsArrayResponse.new(
        status_code: r.status, content_type: content_type, raw_response: r
      )
      if r.status == 200
        if Utils.match_content_type(content_type, 'application/json')
          out = Utils.unmarshal_complex(r.env.response_body, Operations::HeaderParamsArrayRes)
          res.res = out
        end
      end
      res
    end

    sig { params(request: Operations::HeaderParamsMapRequest).returns(Utils::FieldAugmented) }
    def header_params_map(request)

      base_url = @server_url
      url = "#{base_url.delete_suffix('/')}/anything/headers/map"
      headers = Utils.get_headers(request)

      r = @client.get(url) do |req|
        req.headers = headers
        Utils.configure_request_security(req, @sdk.security) if !@sdk.nil? && !@sdk.security.nil?
      end

      content_type = r.headers.fetch('Content-Type', 'application/octet-stream')

      res = Operations::HeaderParamsMapResponse.new(
        status_code: r.status, content_type: content_type, raw_response: r
      )
      if r.status == 200
        if Utils.match_content_type(content_type, 'application/json')
          out = Utils.unmarshal_complex(r.env.response_body, Operations::HeaderParamsMapRes)
          res.res = out
        end
      end
      res
    end

    sig { params(request: Operations::HeaderParamsObjectRequest).returns(Utils::FieldAugmented) }
    def header_params_object(request)

      base_url = @server_url
      url = "#{base_url.delete_suffix('/')}/anything/headers/obj"
      headers = Utils.get_headers(request)

      r = @client.get(url) do |req|
        req.headers = headers
        Utils.configure_request_security(req, @sdk.security) if !@sdk.nil? && !@sdk.security.nil?
      end

      content_type = r.headers.fetch('Content-Type', 'application/octet-stream')

      res = Operations::HeaderParamsObjectResponse.new(
        status_code: r.status, content_type: content_type, raw_response: r
      )
      if r.status == 200
        if Utils.match_content_type(content_type, 'application/json')
          out = Utils.unmarshal_complex(r.env.response_body, Operations::HeaderParamsObjectRes)
          res.res = out
        end
      end
      res
    end

    sig { params(request: Operations::HeaderParamsPrimitiveRequest).returns(Utils::FieldAugmented) }
    def header_params_primitive(request)

      base_url = @server_url
      url = "#{base_url.delete_suffix('/')}/anything/headers/primitive"
      headers = Utils.get_headers(request)

      r = @client.get(url) do |req|
        req.headers = headers
        Utils.configure_request_security(req, @sdk.security) if !@sdk.nil? && !@sdk.security.nil?
      end

      content_type = r.headers.fetch('Content-Type', 'application/octet-stream')

      res = Operations::HeaderParamsPrimitiveResponse.new(
        status_code: r.status, content_type: content_type, raw_response: r
      )
      if r.status == 200
        if Utils.match_content_type(content_type, 'application/json')
          out = Utils.unmarshal_complex(r.env.response_body, Operations::HeaderParamsPrimitiveRes)
          res.res = out
        end
      end
      res
    end

    sig { params(request: Operations::JsonQueryParamsObjectRequest).returns(Utils::FieldAugmented) }
    def json_query_params_object(request)

      base_url = @server_url
      url = "#{base_url.delete_suffix('/')}/anything/queryParams/json/obj"
      query_params = Utils.get_query_params(Operations::JsonQueryParamsObjectRequest, request, @globals)

      r = @client.get(url) do |req|
        req.params = query_params
        Utils.configure_request_security(req, @sdk.security) if !@sdk.nil? && !@sdk.security.nil?
      end

      content_type = r.headers.fetch('Content-Type', 'application/octet-stream')

      res = Operations::JsonQueryParamsObjectResponse.new(
        status_code: r.status, content_type: content_type, raw_response: r
      )
      if r.status == 200
        if Utils.match_content_type(content_type, 'application/json')
          out = Utils.unmarshal_complex(r.env.response_body, Operations::JsonQueryParamsObjectRes)
          res.res = out
        end
      end
      res
    end

    sig { params(request: Operations::MixedQueryParamsRequest).returns(Utils::FieldAugmented) }
    def mixed_query_params(request)

      base_url = @server_url
      url = "#{base_url.delete_suffix('/')}/anything/queryParams/mixed"
      query_params = Utils.get_query_params(Operations::MixedQueryParamsRequest, request, @globals)

      r = @client.get(url) do |req|
        req.params = query_params
        Utils.configure_request_security(req, @sdk.security) if !@sdk.nil? && !@sdk.security.nil?
      end

      content_type = r.headers.fetch('Content-Type', 'application/octet-stream')

      res = Operations::MixedQueryParamsResponse.new(
        status_code: r.status, content_type: content_type, raw_response: r
      )
      if r.status == 200
        if Utils.match_content_type(content_type, 'application/json')
          out = Utils.unmarshal_complex(r.env.response_body, Operations::MixedQueryParamsRes)
          res.res = out
        end
      end
      res
    end

    sig { params(request: Operations::PathParameterJsonRequest).returns(Utils::FieldAugmented) }
    def path_parameter_json(request)

      base_url = @server_url
      url = Utils.generate_url(
        Operations::PathParameterJsonRequest,
        base_url,
        '/anything/pathParams/json/{jsonObj}',
        request, 
        @globals
      )

      r = @client.get(url) do |req|
        Utils.configure_request_security(req, @sdk.security) if !@sdk.nil? && !@sdk.security.nil?
      end

      content_type = r.headers.fetch('Content-Type', 'application/octet-stream')

      res = Operations::PathParameterJsonResponse.new(
        status_code: r.status, content_type: content_type, raw_response: r
      )
      if r.status == 200
        if Utils.match_content_type(content_type, 'application/json')
          out = Utils.unmarshal_complex(r.env.response_body, Operations::PathParameterJsonRes)
          res.res = out
        end
      end
      res
    end

    sig { params(request: Operations::PipeDelimitedQueryParamsArrayRequest).returns(Utils::FieldAugmented) }
    def pipe_delimited_query_params_array(request)

      base_url = @server_url
      url = "#{base_url.delete_suffix('/')}/anything/queryParams/pipe/array"
      query_params = Utils.get_query_params(Operations::PipeDelimitedQueryParamsArrayRequest, request, @globals)

      r = @client.get(url) do |req|
        req.params = query_params
        Utils.configure_request_security(req, @sdk.security) if !@sdk.nil? && !@sdk.security.nil?
      end

      content_type = r.headers.fetch('Content-Type', 'application/octet-stream')

      res = Operations::PipeDelimitedQueryParamsArrayResponse.new(
        status_code: r.status, content_type: content_type, raw_response: r
      )
      if r.status == 200
        if Utils.match_content_type(content_type, 'application/json')
          out = Utils.unmarshal_complex(r.env.response_body, Operations::PipeDelimitedQueryParamsArrayRes)
          res.res = out
        end
      end
      res
    end

    sig { params(request: Operations::SimplePathParameterArraysRequest).returns(Utils::FieldAugmented) }
    def simple_path_parameter_arrays(request)

      base_url = @server_url
      url = Utils.generate_url(
        Operations::SimplePathParameterArraysRequest,
        base_url,
        '/anything/pathParams/arr/{arrParam}',
        request, 
        @globals
      )

      r = @client.get(url) do |req|
        Utils.configure_request_security(req, @sdk.security) if !@sdk.nil? && !@sdk.security.nil?
      end

      content_type = r.headers.fetch('Content-Type', 'application/octet-stream')

      res = Operations::SimplePathParameterArraysResponse.new(
        status_code: r.status, content_type: content_type, raw_response: r
      )
      if r.status == 200
        if Utils.match_content_type(content_type, 'application/json')
          out = Utils.unmarshal_complex(r.env.response_body, Operations::SimplePathParameterArraysRes)
          res.res = out
        end
      end
      res
    end

    sig { params(request: Operations::SimplePathParameterMapsRequest).returns(Utils::FieldAugmented) }
    def simple_path_parameter_maps(request)

      base_url = @server_url
      url = Utils.generate_url(
        Operations::SimplePathParameterMapsRequest,
        base_url,
        '/anything/pathParams/map/{mapParam}/mapExploded/{mapParamExploded}',
        request, 
        @globals
      )

      r = @client.get(url) do |req|
        Utils.configure_request_security(req, @sdk.security) if !@sdk.nil? && !@sdk.security.nil?
      end

      content_type = r.headers.fetch('Content-Type', 'application/octet-stream')

      res = Operations::SimplePathParameterMapsResponse.new(
        status_code: r.status, content_type: content_type, raw_response: r
      )
      if r.status == 200
        if Utils.match_content_type(content_type, 'application/json')
          out = Utils.unmarshal_complex(r.env.response_body, Operations::SimplePathParameterMapsRes)
          res.res = out
        end
      end
      res
    end

    sig { params(request: Operations::SimplePathParameterObjectsRequest).returns(Utils::FieldAugmented) }
    def simple_path_parameter_objects(request)

      base_url = @server_url
      url = Utils.generate_url(
        Operations::SimplePathParameterObjectsRequest,
        base_url,
        '/anything/pathParams/obj/{objParam}/objExploded/{objParamExploded}',
        request, 
        @globals
      )

      r = @client.get(url) do |req|
        Utils.configure_request_security(req, @sdk.security) if !@sdk.nil? && !@sdk.security.nil?
      end

      content_type = r.headers.fetch('Content-Type', 'application/octet-stream')

      res = Operations::SimplePathParameterObjectsResponse.new(
        status_code: r.status, content_type: content_type, raw_response: r
      )
      if r.status == 200
        if Utils.match_content_type(content_type, 'application/json')
          out = Utils.unmarshal_complex(r.env.response_body, Operations::SimplePathParameterObjectsRes)
          res.res = out
        end
      end
      res
    end

    sig { params(request: Operations::SimplePathParameterPrimitivesRequest).returns(Utils::FieldAugmented) }
    def simple_path_parameter_primitives(request)

      base_url = @server_url
      url = Utils.generate_url(
        Operations::SimplePathParameterPrimitivesRequest,
        base_url,
        '/anything/pathParams/str/{strParam}/bool/{boolParam}/int/{intParam}/num/{numParam}',
        request, 
        @globals
      )

      r = @client.get(url) do |req|
        Utils.configure_request_security(req, @sdk.security) if !@sdk.nil? && !@sdk.security.nil?
      end

      content_type = r.headers.fetch('Content-Type', 'application/octet-stream')

      res = Operations::SimplePathParameterPrimitivesResponse.new(
        status_code: r.status, content_type: content_type, raw_response: r
      )
      if r.status == 200
        if Utils.match_content_type(content_type, 'application/json')
          out = Utils.unmarshal_complex(r.env.response_body, Operations::SimplePathParameterPrimitivesRes)
          res.res = out
        end
      end
      res
    end
  end
end
