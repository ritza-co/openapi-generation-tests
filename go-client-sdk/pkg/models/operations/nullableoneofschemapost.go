// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"bytes"
	"encoding/json"
	"errors"
	"net/http"
	"openapi/pkg/models/shared"
)

type NullableOneOfSchemaPostRequestBodyType string

const (
	NullableOneOfSchemaPostRequestBodyTypeTypedObject1 NullableOneOfSchemaPostRequestBodyType = "typedObject1"
	NullableOneOfSchemaPostRequestBodyTypeTypedObject2 NullableOneOfSchemaPostRequestBodyType = "typedObject2"
	NullableOneOfSchemaPostRequestBodyTypeAny          NullableOneOfSchemaPostRequestBodyType = "any"
)

type NullableOneOfSchemaPostRequestBody struct {
	TypedObject1 *shared.TypedObject1
	TypedObject2 *shared.TypedObject2
	Any          interface{}

	Type NullableOneOfSchemaPostRequestBodyType
}

func CreateNullableOneOfSchemaPostRequestBodyTypedObject1(typedObject1 shared.TypedObject1) NullableOneOfSchemaPostRequestBody {
	typ := NullableOneOfSchemaPostRequestBodyTypeTypedObject1

	return NullableOneOfSchemaPostRequestBody{
		TypedObject1: &typedObject1,
		Type:         typ,
	}
}

func CreateNullableOneOfSchemaPostRequestBodyTypedObject2(typedObject2 shared.TypedObject2) NullableOneOfSchemaPostRequestBody {
	typ := NullableOneOfSchemaPostRequestBodyTypeTypedObject2

	return NullableOneOfSchemaPostRequestBody{
		TypedObject2: &typedObject2,
		Type:         typ,
	}
}

func CreateNullableOneOfSchemaPostRequestBodyAny(any interface{}) NullableOneOfSchemaPostRequestBody {
	typ := NullableOneOfSchemaPostRequestBodyTypeAny

	return NullableOneOfSchemaPostRequestBody{
		Any:  &any,
		Type: typ,
	}
}

func (u *NullableOneOfSchemaPostRequestBody) UnmarshalJSON(data []byte) error {
	var d *json.Decoder

	any := new(interface{})
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&any); err == nil {
		u.Any = any
		u.Type = NullableOneOfSchemaPostRequestBodyTypeAny
		return nil
	}

	typedObject1 := new(shared.TypedObject1)
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&typedObject1); err == nil {
		u.TypedObject1 = typedObject1
		u.Type = NullableOneOfSchemaPostRequestBodyTypeTypedObject1
		return nil
	}

	typedObject2 := new(shared.TypedObject2)
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&typedObject2); err == nil {
		u.TypedObject2 = typedObject2
		u.Type = NullableOneOfSchemaPostRequestBodyTypeTypedObject2
		return nil
	}

	return errors.New("could not unmarshal into supported union types")
}

func (u NullableOneOfSchemaPostRequestBody) MarshalJSON() ([]byte, error) {
	if u.Any != nil {
		return json.Marshal(u.Any)
	}

	if u.TypedObject1 != nil {
		return json.Marshal(u.TypedObject1)
	}

	if u.TypedObject2 != nil {
		return json.Marshal(u.TypedObject2)
	}

	return nil, nil
}

type NullableOneOfSchemaPostResJSONType string

const (
	NullableOneOfSchemaPostResJSONTypeTypedObject1 NullableOneOfSchemaPostResJSONType = "typedObject1"
	NullableOneOfSchemaPostResJSONTypeTypedObject2 NullableOneOfSchemaPostResJSONType = "typedObject2"
	NullableOneOfSchemaPostResJSONTypeAny          NullableOneOfSchemaPostResJSONType = "any"
)

type NullableOneOfSchemaPostResJSON struct {
	TypedObject1 *shared.TypedObject1
	TypedObject2 *shared.TypedObject2
	Any          interface{}

	Type NullableOneOfSchemaPostResJSONType
}

func CreateNullableOneOfSchemaPostResJSONTypedObject1(typedObject1 shared.TypedObject1) NullableOneOfSchemaPostResJSON {
	typ := NullableOneOfSchemaPostResJSONTypeTypedObject1

	return NullableOneOfSchemaPostResJSON{
		TypedObject1: &typedObject1,
		Type:         typ,
	}
}

func CreateNullableOneOfSchemaPostResJSONTypedObject2(typedObject2 shared.TypedObject2) NullableOneOfSchemaPostResJSON {
	typ := NullableOneOfSchemaPostResJSONTypeTypedObject2

	return NullableOneOfSchemaPostResJSON{
		TypedObject2: &typedObject2,
		Type:         typ,
	}
}

func CreateNullableOneOfSchemaPostResJSONAny(any interface{}) NullableOneOfSchemaPostResJSON {
	typ := NullableOneOfSchemaPostResJSONTypeAny

	return NullableOneOfSchemaPostResJSON{
		Any:  &any,
		Type: typ,
	}
}

func (u *NullableOneOfSchemaPostResJSON) UnmarshalJSON(data []byte) error {
	var d *json.Decoder

	any := new(interface{})
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&any); err == nil {
		u.Any = any
		u.Type = NullableOneOfSchemaPostResJSONTypeAny
		return nil
	}

	typedObject1 := new(shared.TypedObject1)
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&typedObject1); err == nil {
		u.TypedObject1 = typedObject1
		u.Type = NullableOneOfSchemaPostResJSONTypeTypedObject1
		return nil
	}

	typedObject2 := new(shared.TypedObject2)
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&typedObject2); err == nil {
		u.TypedObject2 = typedObject2
		u.Type = NullableOneOfSchemaPostResJSONTypeTypedObject2
		return nil
	}

	return errors.New("could not unmarshal into supported union types")
}

func (u NullableOneOfSchemaPostResJSON) MarshalJSON() ([]byte, error) {
	if u.Any != nil {
		return json.Marshal(u.Any)
	}

	if u.TypedObject1 != nil {
		return json.Marshal(u.TypedObject1)
	}

	if u.TypedObject2 != nil {
		return json.Marshal(u.TypedObject2)
	}

	return nil, nil
}

// NullableOneOfSchemaPostRes - OK
type NullableOneOfSchemaPostRes struct {
	JSON NullableOneOfSchemaPostResJSON `json:"json"`
}

func (o *NullableOneOfSchemaPostRes) GetJSON() NullableOneOfSchemaPostResJSON {
	if o == nil {
		return NullableOneOfSchemaPostResJSON{}
	}
	return o.JSON
}

type NullableOneOfSchemaPostResponse struct {
	ContentType string
	StatusCode  int
	RawResponse *http.Response
	// OK
	Res *NullableOneOfSchemaPostRes
}

func (o *NullableOneOfSchemaPostResponse) GetContentType() string {
	if o == nil {
		return ""
	}
	return o.ContentType
}

func (o *NullableOneOfSchemaPostResponse) GetStatusCode() int {
	if o == nil {
		return 0
	}
	return o.StatusCode
}

func (o *NullableOneOfSchemaPostResponse) GetRawResponse() *http.Response {
	if o == nil {
		return nil
	}
	return o.RawResponse
}

func (o *NullableOneOfSchemaPostResponse) GetRes() *NullableOneOfSchemaPostRes {
	if o == nil {
		return nil
	}
	return o.Res
}
