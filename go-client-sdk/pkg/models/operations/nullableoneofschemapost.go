// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"errors"
	"net/http"
	"openapi/pkg/models/shared"
	"openapi/pkg/utils"
)

type NullableOneOfSchemaPostRequestBodyType string

const (
	NullableOneOfSchemaPostRequestBodyTypeTypedObject1 NullableOneOfSchemaPostRequestBodyType = "typedObject1"
	NullableOneOfSchemaPostRequestBodyTypeTypedObject2 NullableOneOfSchemaPostRequestBodyType = "typedObject2"
)

type NullableOneOfSchemaPostRequestBody struct {
	TypedObject1 *shared.TypedObject1
	TypedObject2 *shared.TypedObject2

	Type NullableOneOfSchemaPostRequestBodyType
}

func CreateNullableOneOfSchemaPostRequestBodyTypedObject1(typedObject1 shared.TypedObject1) NullableOneOfSchemaPostRequestBody {
	typ := NullableOneOfSchemaPostRequestBodyTypeTypedObject1

	return NullableOneOfSchemaPostRequestBody{
		TypedObject1: &typedObject1,
		Type:         typ,
	}
}

func CreateNullableOneOfSchemaPostRequestBodyTypedObject2(typedObject2 shared.TypedObject2) NullableOneOfSchemaPostRequestBody {
	typ := NullableOneOfSchemaPostRequestBodyTypeTypedObject2

	return NullableOneOfSchemaPostRequestBody{
		TypedObject2: &typedObject2,
		Type:         typ,
	}
}

func (u *NullableOneOfSchemaPostRequestBody) UnmarshalJSON(data []byte) error {

	typedObject1 := new(shared.TypedObject1)
	if err := utils.UnmarshalJSON(data, &typedObject1, "", true, true); err == nil {
		u.TypedObject1 = typedObject1
		u.Type = NullableOneOfSchemaPostRequestBodyTypeTypedObject1
		return nil
	}

	typedObject2 := new(shared.TypedObject2)
	if err := utils.UnmarshalJSON(data, &typedObject2, "", true, true); err == nil {
		u.TypedObject2 = typedObject2
		u.Type = NullableOneOfSchemaPostRequestBodyTypeTypedObject2
		return nil
	}

	return errors.New("could not unmarshal into supported union types")
}

func (u NullableOneOfSchemaPostRequestBody) MarshalJSON() ([]byte, error) {
	if u.TypedObject1 != nil {
		return utils.MarshalJSON(u.TypedObject1, "", true)
	}

	if u.TypedObject2 != nil {
		return utils.MarshalJSON(u.TypedObject2, "", true)
	}

	return nil, errors.New("could not marshal union type: all fields are null")
}

type NullableOneOfSchemaPostResJSONType string

const (
	NullableOneOfSchemaPostResJSONTypeTypedObject1 NullableOneOfSchemaPostResJSONType = "typedObject1"
	NullableOneOfSchemaPostResJSONTypeTypedObject2 NullableOneOfSchemaPostResJSONType = "typedObject2"
)

type NullableOneOfSchemaPostResJSON struct {
	TypedObject1 *shared.TypedObject1
	TypedObject2 *shared.TypedObject2

	Type NullableOneOfSchemaPostResJSONType
}

func CreateNullableOneOfSchemaPostResJSONTypedObject1(typedObject1 shared.TypedObject1) NullableOneOfSchemaPostResJSON {
	typ := NullableOneOfSchemaPostResJSONTypeTypedObject1

	return NullableOneOfSchemaPostResJSON{
		TypedObject1: &typedObject1,
		Type:         typ,
	}
}

func CreateNullableOneOfSchemaPostResJSONTypedObject2(typedObject2 shared.TypedObject2) NullableOneOfSchemaPostResJSON {
	typ := NullableOneOfSchemaPostResJSONTypeTypedObject2

	return NullableOneOfSchemaPostResJSON{
		TypedObject2: &typedObject2,
		Type:         typ,
	}
}

func (u *NullableOneOfSchemaPostResJSON) UnmarshalJSON(data []byte) error {

	typedObject1 := new(shared.TypedObject1)
	if err := utils.UnmarshalJSON(data, &typedObject1, "", true, true); err == nil {
		u.TypedObject1 = typedObject1
		u.Type = NullableOneOfSchemaPostResJSONTypeTypedObject1
		return nil
	}

	typedObject2 := new(shared.TypedObject2)
	if err := utils.UnmarshalJSON(data, &typedObject2, "", true, true); err == nil {
		u.TypedObject2 = typedObject2
		u.Type = NullableOneOfSchemaPostResJSONTypeTypedObject2
		return nil
	}

	return errors.New("could not unmarshal into supported union types")
}

func (u NullableOneOfSchemaPostResJSON) MarshalJSON() ([]byte, error) {
	if u.TypedObject1 != nil {
		return utils.MarshalJSON(u.TypedObject1, "", true)
	}

	if u.TypedObject2 != nil {
		return utils.MarshalJSON(u.TypedObject2, "", true)
	}

	return nil, errors.New("could not marshal union type: all fields are null")
}

// NullableOneOfSchemaPostRes - OK
type NullableOneOfSchemaPostRes struct {
	JSON *NullableOneOfSchemaPostResJSON `json:"json"`
}

func (o *NullableOneOfSchemaPostRes) GetJSON() *NullableOneOfSchemaPostResJSON {
	if o == nil {
		return nil
	}
	return o.JSON
}

type NullableOneOfSchemaPostResponse struct {
	// HTTP response content type for this operation
	ContentType string
	// HTTP response status code for this operation
	StatusCode int
	// Raw HTTP response; suitable for custom response parsing
	RawResponse *http.Response
	// OK
	Res *NullableOneOfSchemaPostRes
}

func (o *NullableOneOfSchemaPostResponse) GetContentType() string {
	if o == nil {
		return ""
	}
	return o.ContentType
}

func (o *NullableOneOfSchemaPostResponse) GetStatusCode() int {
	if o == nil {
		return 0
	}
	return o.StatusCode
}

func (o *NullableOneOfSchemaPostResponse) GetRawResponse() *http.Response {
	if o == nil {
		return nil
	}
	return o.RawResponse
}

func (o *NullableOneOfSchemaPostResponse) GetRes() *NullableOneOfSchemaPostRes {
	if o == nil {
		return nil
	}
	return o.Res
}
