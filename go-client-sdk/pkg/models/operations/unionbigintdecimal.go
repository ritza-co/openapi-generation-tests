// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"errors"
	"github.com/ericlagergren/decimal"
	"math/big"
	"net/http"
	"openapi/pkg/utils"
)

type UnionBigIntDecimalRequestBodyType string

const (
	UnionBigIntDecimalRequestBodyTypeBigint  UnionBigIntDecimalRequestBodyType = "bigint"
	UnionBigIntDecimalRequestBodyTypeDecimal UnionBigIntDecimalRequestBodyType = "decimal"
)

type UnionBigIntDecimalRequestBody struct {
	Bigint  *big.Int
	Decimal *decimal.Big

	Type UnionBigIntDecimalRequestBodyType
}

func CreateUnionBigIntDecimalRequestBodyBigint(bigint *big.Int) UnionBigIntDecimalRequestBody {
	typ := UnionBigIntDecimalRequestBodyTypeBigint

	return UnionBigIntDecimalRequestBody{
		Bigint: bigint,
		Type:   typ,
	}
}

func CreateUnionBigIntDecimalRequestBodyDecimal(decimal *decimal.Big) UnionBigIntDecimalRequestBody {
	typ := UnionBigIntDecimalRequestBodyTypeDecimal

	return UnionBigIntDecimalRequestBody{
		Decimal: decimal,
		Type:    typ,
	}
}

func (u *UnionBigIntDecimalRequestBody) UnmarshalJSON(data []byte) error {

	bigint := big.NewInt(0)
	if err := utils.UnmarshalJSON(data, &bigint, `bigint:"string"`, true, true); err == nil {
		u.Bigint = bigint
		u.Type = UnionBigIntDecimalRequestBodyTypeBigint
		return nil
	}

	decimal := new(decimal.Big).SetFloat64(0.0)
	if err := utils.UnmarshalJSON(data, &decimal, `decimal:"number"`, true, true); err == nil {
		u.Decimal = decimal
		u.Type = UnionBigIntDecimalRequestBodyTypeDecimal
		return nil
	}

	return errors.New("could not unmarshal into supported union types")
}

func (u UnionBigIntDecimalRequestBody) MarshalJSON() ([]byte, error) {
	if u.Bigint != nil {
		return utils.MarshalJSON(u.Bigint, `bigint:"string"`, true)
	}

	if u.Decimal != nil {
		return utils.MarshalJSON(u.Decimal, `decimal:"number"`, true)
	}

	return nil, errors.New("could not marshal union type: all fields are null")
}

type UnionBigIntDecimalResJSONType string

const (
	UnionBigIntDecimalResJSONTypeBigint  UnionBigIntDecimalResJSONType = "bigint"
	UnionBigIntDecimalResJSONTypeDecimal UnionBigIntDecimalResJSONType = "decimal"
)

type UnionBigIntDecimalResJSON struct {
	Bigint  *big.Int
	Decimal *decimal.Big

	Type UnionBigIntDecimalResJSONType
}

func CreateUnionBigIntDecimalResJSONBigint(bigint *big.Int) UnionBigIntDecimalResJSON {
	typ := UnionBigIntDecimalResJSONTypeBigint

	return UnionBigIntDecimalResJSON{
		Bigint: bigint,
		Type:   typ,
	}
}

func CreateUnionBigIntDecimalResJSONDecimal(decimal *decimal.Big) UnionBigIntDecimalResJSON {
	typ := UnionBigIntDecimalResJSONTypeDecimal

	return UnionBigIntDecimalResJSON{
		Decimal: decimal,
		Type:    typ,
	}
}

func (u *UnionBigIntDecimalResJSON) UnmarshalJSON(data []byte) error {

	bigint := big.NewInt(0)
	if err := utils.UnmarshalJSON(data, &bigint, `bigint:"string"`, true, true); err == nil {
		u.Bigint = bigint
		u.Type = UnionBigIntDecimalResJSONTypeBigint
		return nil
	}

	decimal := new(decimal.Big).SetFloat64(0.0)
	if err := utils.UnmarshalJSON(data, &decimal, `decimal:"number"`, true, true); err == nil {
		u.Decimal = decimal
		u.Type = UnionBigIntDecimalResJSONTypeDecimal
		return nil
	}

	return errors.New("could not unmarshal into supported union types")
}

func (u UnionBigIntDecimalResJSON) MarshalJSON() ([]byte, error) {
	if u.Bigint != nil {
		return utils.MarshalJSON(u.Bigint, `bigint:"string"`, true)
	}

	if u.Decimal != nil {
		return utils.MarshalJSON(u.Decimal, `decimal:"number"`, true)
	}

	return nil, errors.New("could not marshal union type: all fields are null")
}

// UnionBigIntDecimalRes - OK
type UnionBigIntDecimalRes struct {
	JSON UnionBigIntDecimalResJSON `json:"json"`
}

func (o *UnionBigIntDecimalRes) GetJSON() UnionBigIntDecimalResJSON {
	if o == nil {
		return UnionBigIntDecimalResJSON{}
	}
	return o.JSON
}

type UnionBigIntDecimalResponse struct {
	// HTTP response content type for this operation
	ContentType string
	// HTTP response status code for this operation
	StatusCode int
	// Raw HTTP response; suitable for custom response parsing
	RawResponse *http.Response
	// OK
	Res *UnionBigIntDecimalRes
}

func (o *UnionBigIntDecimalResponse) GetContentType() string {
	if o == nil {
		return ""
	}
	return o.ContentType
}

func (o *UnionBigIntDecimalResponse) GetStatusCode() int {
	if o == nil {
		return 0
	}
	return o.StatusCode
}

func (o *UnionBigIntDecimalResponse) GetRawResponse() *http.Response {
	if o == nil {
		return nil
	}
	return o.RawResponse
}

func (o *UnionBigIntDecimalResponse) GetRes() *UnionBigIntDecimalRes {
	if o == nil {
		return nil
	}
	return o.Res
}
