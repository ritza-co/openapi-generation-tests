// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"errors"
	"math/big"
	"net/http"
	"openapi/pkg/utils"
	"time"
)

type UnionDateTimeBigIntRequestBodyType string

const (
	UnionDateTimeBigIntRequestBodyTypeDateTime UnionDateTimeBigIntRequestBodyType = "date-time"
	UnionDateTimeBigIntRequestBodyTypeBigint   UnionDateTimeBigIntRequestBodyType = "bigint"
)

type UnionDateTimeBigIntRequestBody struct {
	DateTime *time.Time
	Bigint   *big.Int

	Type UnionDateTimeBigIntRequestBodyType
}

func CreateUnionDateTimeBigIntRequestBodyDateTime(dateTime time.Time) UnionDateTimeBigIntRequestBody {
	typ := UnionDateTimeBigIntRequestBodyTypeDateTime

	return UnionDateTimeBigIntRequestBody{
		DateTime: &dateTime,
		Type:     typ,
	}
}

func CreateUnionDateTimeBigIntRequestBodyBigint(bigint *big.Int) UnionDateTimeBigIntRequestBody {
	typ := UnionDateTimeBigIntRequestBodyTypeBigint

	return UnionDateTimeBigIntRequestBody{
		Bigint: bigint,
		Type:   typ,
	}
}

func (u *UnionDateTimeBigIntRequestBody) UnmarshalJSON(data []byte) error {

	dateTime := time.Time{}
	if err := utils.UnmarshalJSON(data, &dateTime, "", true, true); err == nil {
		u.DateTime = &dateTime
		u.Type = UnionDateTimeBigIntRequestBodyTypeDateTime
		return nil
	}

	bigint := big.NewInt(0)
	if err := utils.UnmarshalJSON(data, &bigint, "", true, true); err == nil {
		u.Bigint = bigint
		u.Type = UnionDateTimeBigIntRequestBodyTypeBigint
		return nil
	}

	return errors.New("could not unmarshal into supported union types")
}

func (u UnionDateTimeBigIntRequestBody) MarshalJSON() ([]byte, error) {
	if u.DateTime != nil {
		return utils.MarshalJSON(u.DateTime, "", true)
	}

	if u.Bigint != nil {
		return utils.MarshalJSON(u.Bigint, "", true)
	}

	return nil, errors.New("could not marshal union type: all fields are null")
}

type UnionDateTimeBigIntResJSONType string

const (
	UnionDateTimeBigIntResJSONTypeDateTime UnionDateTimeBigIntResJSONType = "date-time"
	UnionDateTimeBigIntResJSONTypeBigint   UnionDateTimeBigIntResJSONType = "bigint"
)

type UnionDateTimeBigIntResJSON struct {
	DateTime *time.Time
	Bigint   *big.Int

	Type UnionDateTimeBigIntResJSONType
}

func CreateUnionDateTimeBigIntResJSONDateTime(dateTime time.Time) UnionDateTimeBigIntResJSON {
	typ := UnionDateTimeBigIntResJSONTypeDateTime

	return UnionDateTimeBigIntResJSON{
		DateTime: &dateTime,
		Type:     typ,
	}
}

func CreateUnionDateTimeBigIntResJSONBigint(bigint *big.Int) UnionDateTimeBigIntResJSON {
	typ := UnionDateTimeBigIntResJSONTypeBigint

	return UnionDateTimeBigIntResJSON{
		Bigint: bigint,
		Type:   typ,
	}
}

func (u *UnionDateTimeBigIntResJSON) UnmarshalJSON(data []byte) error {

	dateTime := time.Time{}
	if err := utils.UnmarshalJSON(data, &dateTime, "", true, true); err == nil {
		u.DateTime = &dateTime
		u.Type = UnionDateTimeBigIntResJSONTypeDateTime
		return nil
	}

	bigint := big.NewInt(0)
	if err := utils.UnmarshalJSON(data, &bigint, "", true, true); err == nil {
		u.Bigint = bigint
		u.Type = UnionDateTimeBigIntResJSONTypeBigint
		return nil
	}

	return errors.New("could not unmarshal into supported union types")
}

func (u UnionDateTimeBigIntResJSON) MarshalJSON() ([]byte, error) {
	if u.DateTime != nil {
		return utils.MarshalJSON(u.DateTime, "", true)
	}

	if u.Bigint != nil {
		return utils.MarshalJSON(u.Bigint, "", true)
	}

	return nil, errors.New("could not marshal union type: all fields are null")
}

// UnionDateTimeBigIntRes - OK
type UnionDateTimeBigIntRes struct {
	JSON UnionDateTimeBigIntResJSON `json:"json"`
}

func (o *UnionDateTimeBigIntRes) GetJSON() UnionDateTimeBigIntResJSON {
	if o == nil {
		return UnionDateTimeBigIntResJSON{}
	}
	return o.JSON
}

type UnionDateTimeBigIntResponse struct {
	// HTTP response content type for this operation
	ContentType string
	// HTTP response status code for this operation
	StatusCode int
	// Raw HTTP response; suitable for custom response parsing
	RawResponse *http.Response
	// OK
	Res *UnionDateTimeBigIntRes
}

func (o *UnionDateTimeBigIntResponse) GetContentType() string {
	if o == nil {
		return ""
	}
	return o.ContentType
}

func (o *UnionDateTimeBigIntResponse) GetStatusCode() int {
	if o == nil {
		return 0
	}
	return o.StatusCode
}

func (o *UnionDateTimeBigIntResponse) GetRawResponse() *http.Response {
	if o == nil {
		return nil
	}
	return o.RawResponse
}

func (o *UnionDateTimeBigIntResponse) GetRes() *UnionDateTimeBigIntRes {
	if o == nil {
		return nil
	}
	return o.Res
}
