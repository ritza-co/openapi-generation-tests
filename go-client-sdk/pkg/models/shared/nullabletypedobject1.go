// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"bytes"
	"encoding/json"
	"errors"
)

type NullableTypedObject1Type string

const (
	NullableTypedObject1TypeTypedObject1 NullableTypedObject1Type = "typedObject1"
	NullableTypedObject1TypeAny          NullableTypedObject1Type = "any"
)

type NullableTypedObject1 struct {
	TypedObject1 *TypedObject1
	Any          interface{}

	Type NullableTypedObject1Type
}

func CreateNullableTypedObject1TypedObject1(typedObject1 TypedObject1) NullableTypedObject1 {
	typ := NullableTypedObject1TypeTypedObject1

	return NullableTypedObject1{
		TypedObject1: &typedObject1,
		Type:         typ,
	}
}

func CreateNullableTypedObject1Any(any interface{}) NullableTypedObject1 {
	typ := NullableTypedObject1TypeAny

	return NullableTypedObject1{
		Any:  &any,
		Type: typ,
	}
}

func (u *NullableTypedObject1) UnmarshalJSON(data []byte) error {
	var d *json.Decoder

	any := new(interface{})
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&any); err == nil {
		u.Any = any
		u.Type = NullableTypedObject1TypeAny
		return nil
	}

	typedObject1 := new(TypedObject1)
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&typedObject1); err == nil {
		u.TypedObject1 = typedObject1
		u.Type = NullableTypedObject1TypeTypedObject1
		return nil
	}

	return errors.New("could not unmarshal into supported union types")
}

func (u NullableTypedObject1) MarshalJSON() ([]byte, error) {
	if u.Any != nil {
		return json.Marshal(u.Any)
	}

	if u.TypedObject1 != nil {
		return json.Marshal(u.TypedObject1)
	}

	return nil, nil
}
