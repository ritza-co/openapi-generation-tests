// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"errors"
	"openapi/pkg/utils"
)

type OneOfCircularReferenceObjectChildType string

const (
	OneOfCircularReferenceObjectChildTypeOneOfCircularReferenceObject OneOfCircularReferenceObjectChildType = "oneOfCircularReferenceObject"
	OneOfCircularReferenceObjectChildTypeSimpleObject                 OneOfCircularReferenceObjectChildType = "simpleObject"
)

type OneOfCircularReferenceObjectChild struct {
	OneOfCircularReferenceObject *OneOfCircularReferenceObject
	SimpleObject                 *SimpleObject

	Type OneOfCircularReferenceObjectChildType
}

func CreateOneOfCircularReferenceObjectChildOneOfCircularReferenceObject(oneOfCircularReferenceObject OneOfCircularReferenceObject) OneOfCircularReferenceObjectChild {
	typ := OneOfCircularReferenceObjectChildTypeOneOfCircularReferenceObject

	return OneOfCircularReferenceObjectChild{
		OneOfCircularReferenceObject: &oneOfCircularReferenceObject,
		Type:                         typ,
	}
}

func CreateOneOfCircularReferenceObjectChildSimpleObject(simpleObject SimpleObject) OneOfCircularReferenceObjectChild {
	typ := OneOfCircularReferenceObjectChildTypeSimpleObject

	return OneOfCircularReferenceObjectChild{
		SimpleObject: &simpleObject,
		Type:         typ,
	}
}

func (u *OneOfCircularReferenceObjectChild) UnmarshalJSON(data []byte) error {

	oneOfCircularReferenceObject := new(OneOfCircularReferenceObject)
	if err := utils.UnmarshalJSON(data, &oneOfCircularReferenceObject, "", true, true); err == nil {
		u.OneOfCircularReferenceObject = oneOfCircularReferenceObject
		u.Type = OneOfCircularReferenceObjectChildTypeOneOfCircularReferenceObject
		return nil
	}

	simpleObject := new(SimpleObject)
	if err := utils.UnmarshalJSON(data, &simpleObject, "", true, true); err == nil {
		u.SimpleObject = simpleObject
		u.Type = OneOfCircularReferenceObjectChildTypeSimpleObject
		return nil
	}

	return errors.New("could not unmarshal into supported union types")
}

func (u OneOfCircularReferenceObjectChild) MarshalJSON() ([]byte, error) {
	if u.OneOfCircularReferenceObject != nil {
		return utils.MarshalJSON(u.OneOfCircularReferenceObject, "", true)
	}

	if u.SimpleObject != nil {
		return utils.MarshalJSON(u.SimpleObject, "", true)
	}

	return nil, errors.New("could not marshal union type: all fields are null")
}

type OneOfCircularReferenceObject struct {
	Child OneOfCircularReferenceObjectChild `json:"child"`
}

func (o *OneOfCircularReferenceObject) GetChild() OneOfCircularReferenceObjectChild {
	if o == nil {
		return OneOfCircularReferenceObjectChild{}
	}
	return o.Child
}
