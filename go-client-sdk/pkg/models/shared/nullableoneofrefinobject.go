// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"errors"
	"openapi/pkg/utils"
)

type NullableOneOfRefInObjectNullableOneOfTwoType string

const (
	NullableOneOfRefInObjectNullableOneOfTwoTypeTypedObject1 NullableOneOfRefInObjectNullableOneOfTwoType = "typedObject1"
	NullableOneOfRefInObjectNullableOneOfTwoTypeTypedObject2 NullableOneOfRefInObjectNullableOneOfTwoType = "typedObject2"
)

type NullableOneOfRefInObjectNullableOneOfTwo struct {
	TypedObject1 *TypedObject1
	TypedObject2 *TypedObject2

	Type NullableOneOfRefInObjectNullableOneOfTwoType
}

func CreateNullableOneOfRefInObjectNullableOneOfTwoTypedObject1(typedObject1 TypedObject1) NullableOneOfRefInObjectNullableOneOfTwo {
	typ := NullableOneOfRefInObjectNullableOneOfTwoTypeTypedObject1

	return NullableOneOfRefInObjectNullableOneOfTwo{
		TypedObject1: &typedObject1,
		Type:         typ,
	}
}

func CreateNullableOneOfRefInObjectNullableOneOfTwoTypedObject2(typedObject2 TypedObject2) NullableOneOfRefInObjectNullableOneOfTwo {
	typ := NullableOneOfRefInObjectNullableOneOfTwoTypeTypedObject2

	return NullableOneOfRefInObjectNullableOneOfTwo{
		TypedObject2: &typedObject2,
		Type:         typ,
	}
}

func (u *NullableOneOfRefInObjectNullableOneOfTwo) UnmarshalJSON(data []byte) error {

	typedObject1 := new(TypedObject1)
	if err := utils.UnmarshalJSON(data, &typedObject1, "", true, true); err == nil {
		u.TypedObject1 = typedObject1
		u.Type = NullableOneOfRefInObjectNullableOneOfTwoTypeTypedObject1
		return nil
	}

	typedObject2 := new(TypedObject2)
	if err := utils.UnmarshalJSON(data, &typedObject2, "", true, true); err == nil {
		u.TypedObject2 = typedObject2
		u.Type = NullableOneOfRefInObjectNullableOneOfTwoTypeTypedObject2
		return nil
	}

	return errors.New("could not unmarshal into supported union types")
}

func (u NullableOneOfRefInObjectNullableOneOfTwo) MarshalJSON() ([]byte, error) {
	if u.TypedObject1 != nil {
		return utils.MarshalJSON(u.TypedObject1, "", true)
	}

	if u.TypedObject2 != nil {
		return utils.MarshalJSON(u.TypedObject2, "", true)
	}

	return nil, errors.New("could not marshal union type: all fields are null")
}

type NullableOneOfRefInObjectOneOfOneType string

const (
	NullableOneOfRefInObjectOneOfOneTypeTypedObject1 NullableOneOfRefInObjectOneOfOneType = "typedObject1"
)

type NullableOneOfRefInObjectOneOfOne struct {
	TypedObject1 *TypedObject1

	Type NullableOneOfRefInObjectOneOfOneType
}

func CreateNullableOneOfRefInObjectOneOfOneTypedObject1(typedObject1 TypedObject1) NullableOneOfRefInObjectOneOfOne {
	typ := NullableOneOfRefInObjectOneOfOneTypeTypedObject1

	return NullableOneOfRefInObjectOneOfOne{
		TypedObject1: &typedObject1,
		Type:         typ,
	}
}

func (u *NullableOneOfRefInObjectOneOfOne) UnmarshalJSON(data []byte) error {

	typedObject1 := new(TypedObject1)
	if err := utils.UnmarshalJSON(data, &typedObject1, "", true, true); err == nil {
		u.TypedObject1 = typedObject1
		u.Type = NullableOneOfRefInObjectOneOfOneTypeTypedObject1
		return nil
	}

	return errors.New("could not unmarshal into supported union types")
}

func (u NullableOneOfRefInObjectOneOfOne) MarshalJSON() ([]byte, error) {
	if u.TypedObject1 != nil {
		return utils.MarshalJSON(u.TypedObject1, "", true)
	}

	return nil, errors.New("could not marshal union type: all fields are null")
}

type NullableOneOfRefInObject struct {
	NullableOneOfOne *TypedObject1                             `json:"NullableOneOfOne"`
	NullableOneOfTwo *NullableOneOfRefInObjectNullableOneOfTwo `json:"NullableOneOfTwo"`
	OneOfOne         NullableOneOfRefInObjectOneOfOne          `json:"OneOfOne"`
}

func (o *NullableOneOfRefInObject) GetNullableOneOfOne() *TypedObject1 {
	if o == nil {
		return nil
	}
	return o.NullableOneOfOne
}

func (o *NullableOneOfRefInObject) GetNullableOneOfTwo() *NullableOneOfRefInObjectNullableOneOfTwo {
	if o == nil {
		return nil
	}
	return o.NullableOneOfTwo
}

func (o *NullableOneOfRefInObject) GetOneOfOne() NullableOneOfRefInObjectOneOfOne {
	if o == nil {
		return NullableOneOfRefInObjectOneOfOne{}
	}
	return o.OneOfOne
}
