// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"bytes"
	"encoding/json"
	"errors"
)

type NullableOneOfRefInObjectNullableOneOfOneType string

const (
	NullableOneOfRefInObjectNullableOneOfOneTypeTypedObject1 NullableOneOfRefInObjectNullableOneOfOneType = "typedObject1"
	NullableOneOfRefInObjectNullableOneOfOneTypeAny          NullableOneOfRefInObjectNullableOneOfOneType = "any"
)

type NullableOneOfRefInObjectNullableOneOfOne struct {
	TypedObject1 *TypedObject1
	Any          interface{}

	Type NullableOneOfRefInObjectNullableOneOfOneType
}

func CreateNullableOneOfRefInObjectNullableOneOfOneTypedObject1(typedObject1 TypedObject1) NullableOneOfRefInObjectNullableOneOfOne {
	typ := NullableOneOfRefInObjectNullableOneOfOneTypeTypedObject1

	return NullableOneOfRefInObjectNullableOneOfOne{
		TypedObject1: &typedObject1,
		Type:         typ,
	}
}

func CreateNullableOneOfRefInObjectNullableOneOfOneAny(any interface{}) NullableOneOfRefInObjectNullableOneOfOne {
	typ := NullableOneOfRefInObjectNullableOneOfOneTypeAny

	return NullableOneOfRefInObjectNullableOneOfOne{
		Any:  &any,
		Type: typ,
	}
}

func (u *NullableOneOfRefInObjectNullableOneOfOne) UnmarshalJSON(data []byte) error {
	var d *json.Decoder

	any := new(interface{})
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&any); err == nil {
		u.Any = any
		u.Type = NullableOneOfRefInObjectNullableOneOfOneTypeAny
		return nil
	}

	typedObject1 := new(TypedObject1)
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&typedObject1); err == nil {
		u.TypedObject1 = typedObject1
		u.Type = NullableOneOfRefInObjectNullableOneOfOneTypeTypedObject1
		return nil
	}

	return errors.New("could not unmarshal into supported union types")
}

func (u NullableOneOfRefInObjectNullableOneOfOne) MarshalJSON() ([]byte, error) {
	if u.Any != nil {
		return json.Marshal(u.Any)
	}

	if u.TypedObject1 != nil {
		return json.Marshal(u.TypedObject1)
	}

	return nil, nil
}

type NullableOneOfRefInObjectNullableOneOfTwoType string

const (
	NullableOneOfRefInObjectNullableOneOfTwoTypeTypedObject1 NullableOneOfRefInObjectNullableOneOfTwoType = "typedObject1"
	NullableOneOfRefInObjectNullableOneOfTwoTypeTypedObject2 NullableOneOfRefInObjectNullableOneOfTwoType = "typedObject2"
	NullableOneOfRefInObjectNullableOneOfTwoTypeAny          NullableOneOfRefInObjectNullableOneOfTwoType = "any"
)

type NullableOneOfRefInObjectNullableOneOfTwo struct {
	TypedObject1 *TypedObject1
	TypedObject2 *TypedObject2
	Any          interface{}

	Type NullableOneOfRefInObjectNullableOneOfTwoType
}

func CreateNullableOneOfRefInObjectNullableOneOfTwoTypedObject1(typedObject1 TypedObject1) NullableOneOfRefInObjectNullableOneOfTwo {
	typ := NullableOneOfRefInObjectNullableOneOfTwoTypeTypedObject1

	return NullableOneOfRefInObjectNullableOneOfTwo{
		TypedObject1: &typedObject1,
		Type:         typ,
	}
}

func CreateNullableOneOfRefInObjectNullableOneOfTwoTypedObject2(typedObject2 TypedObject2) NullableOneOfRefInObjectNullableOneOfTwo {
	typ := NullableOneOfRefInObjectNullableOneOfTwoTypeTypedObject2

	return NullableOneOfRefInObjectNullableOneOfTwo{
		TypedObject2: &typedObject2,
		Type:         typ,
	}
}

func CreateNullableOneOfRefInObjectNullableOneOfTwoAny(any interface{}) NullableOneOfRefInObjectNullableOneOfTwo {
	typ := NullableOneOfRefInObjectNullableOneOfTwoTypeAny

	return NullableOneOfRefInObjectNullableOneOfTwo{
		Any:  &any,
		Type: typ,
	}
}

func (u *NullableOneOfRefInObjectNullableOneOfTwo) UnmarshalJSON(data []byte) error {
	var d *json.Decoder

	any := new(interface{})
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&any); err == nil {
		u.Any = any
		u.Type = NullableOneOfRefInObjectNullableOneOfTwoTypeAny
		return nil
	}

	typedObject1 := new(TypedObject1)
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&typedObject1); err == nil {
		u.TypedObject1 = typedObject1
		u.Type = NullableOneOfRefInObjectNullableOneOfTwoTypeTypedObject1
		return nil
	}

	typedObject2 := new(TypedObject2)
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&typedObject2); err == nil {
		u.TypedObject2 = typedObject2
		u.Type = NullableOneOfRefInObjectNullableOneOfTwoTypeTypedObject2
		return nil
	}

	return errors.New("could not unmarshal into supported union types")
}

func (u NullableOneOfRefInObjectNullableOneOfTwo) MarshalJSON() ([]byte, error) {
	if u.Any != nil {
		return json.Marshal(u.Any)
	}

	if u.TypedObject1 != nil {
		return json.Marshal(u.TypedObject1)
	}

	if u.TypedObject2 != nil {
		return json.Marshal(u.TypedObject2)
	}

	return nil, nil
}

type NullableOneOfRefInObjectOneOfOneType string

const (
	NullableOneOfRefInObjectOneOfOneTypeTypedObject1 NullableOneOfRefInObjectOneOfOneType = "typedObject1"
)

type NullableOneOfRefInObjectOneOfOne struct {
	TypedObject1 *TypedObject1

	Type NullableOneOfRefInObjectOneOfOneType
}

func CreateNullableOneOfRefInObjectOneOfOneTypedObject1(typedObject1 TypedObject1) NullableOneOfRefInObjectOneOfOne {
	typ := NullableOneOfRefInObjectOneOfOneTypeTypedObject1

	return NullableOneOfRefInObjectOneOfOne{
		TypedObject1: &typedObject1,
		Type:         typ,
	}
}

func (u *NullableOneOfRefInObjectOneOfOne) UnmarshalJSON(data []byte) error {
	var d *json.Decoder

	typedObject1 := new(TypedObject1)
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&typedObject1); err == nil {
		u.TypedObject1 = typedObject1
		u.Type = NullableOneOfRefInObjectOneOfOneTypeTypedObject1
		return nil
	}

	return errors.New("could not unmarshal into supported union types")
}

func (u NullableOneOfRefInObjectOneOfOne) MarshalJSON() ([]byte, error) {
	if u.TypedObject1 != nil {
		return json.Marshal(u.TypedObject1)
	}

	return nil, nil
}

type NullableOneOfRefInObject struct {
	NullableOneOfOne NullableOneOfRefInObjectNullableOneOfOne `json:"NullableOneOfOne"`
	NullableOneOfTwo NullableOneOfRefInObjectNullableOneOfTwo `json:"NullableOneOfTwo"`
	OneOfOne         NullableOneOfRefInObjectOneOfOne         `json:"OneOfOne"`
}

func (o *NullableOneOfRefInObject) GetNullableOneOfOne() NullableOneOfRefInObjectNullableOneOfOne {
	if o == nil {
		return NullableOneOfRefInObjectNullableOneOfOne{}
	}
	return o.NullableOneOfOne
}

func (o *NullableOneOfRefInObject) GetNullableOneOfTwo() NullableOneOfRefInObjectNullableOneOfTwo {
	if o == nil {
		return NullableOneOfRefInObjectNullableOneOfTwo{}
	}
	return o.NullableOneOfTwo
}

func (o *NullableOneOfRefInObject) GetOneOfOne() NullableOneOfRefInObjectOneOfOne {
	if o == nil {
		return NullableOneOfRefInObjectOneOfOne{}
	}
	return o.OneOfOne
}
