// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"openapi/pkg/utils"
	"time"
)

type ExampleCar struct {
	CreatedAt *time.Time `json:"createdAt,omitempty"`
	Make      string     `json:"make"`
	Model     string     `json:"model"`
	Name      string     `json:"name"`
	type_     string     `const:"car" json:"type"`
	UpdatedAt *time.Time `json:"updatedAt,omitempty"`
	Year      float64    `json:"year"`
}

func (e ExampleCar) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(e, "", false)
}

func (e *ExampleCar) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &e, "", false, true); err != nil {
		return err
	}
	return nil
}

func (o *ExampleCar) GetCreatedAt() *time.Time {
	if o == nil {
		return nil
	}
	return o.CreatedAt
}

func (o *ExampleCar) GetMake() string {
	if o == nil {
		return ""
	}
	return o.Make
}

func (o *ExampleCar) GetModel() string {
	if o == nil {
		return ""
	}
	return o.Model
}

func (o *ExampleCar) GetName() string {
	if o == nil {
		return ""
	}
	return o.Name
}

func (o *ExampleCar) GetType() string {
	return "car"
}

func (o *ExampleCar) GetUpdatedAt() *time.Time {
	if o == nil {
		return nil
	}
	return o.UpdatedAt
}

func (o *ExampleCar) GetYear() float64 {
	if o == nil {
		return 0.0
	}
	return o.Year
}
