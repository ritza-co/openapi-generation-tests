// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"bytes"
	"encoding/json"
	"errors"
)

type WeaklyTypedOneOfReadOnlyObject1Type string

const (
	WeaklyTypedOneOfReadOnlyObject1TypeSimpleObject   WeaklyTypedOneOfReadOnlyObject1Type = "simpleObject"
	WeaklyTypedOneOfReadOnlyObject1TypeReadOnlyObject WeaklyTypedOneOfReadOnlyObject1Type = "readOnlyObject"
)

type WeaklyTypedOneOfReadOnlyObject1 struct {
	SimpleObject   *SimpleObject
	ReadOnlyObject *ReadOnlyObject

	Type WeaklyTypedOneOfReadOnlyObject1Type
}

func CreateWeaklyTypedOneOfReadOnlyObject1SimpleObject(simpleObject SimpleObject) WeaklyTypedOneOfReadOnlyObject1 {
	typ := WeaklyTypedOneOfReadOnlyObject1TypeSimpleObject

	return WeaklyTypedOneOfReadOnlyObject1{
		SimpleObject: &simpleObject,
		Type:         typ,
	}
}

func CreateWeaklyTypedOneOfReadOnlyObject1ReadOnlyObject(readOnlyObject ReadOnlyObject) WeaklyTypedOneOfReadOnlyObject1 {
	typ := WeaklyTypedOneOfReadOnlyObject1TypeReadOnlyObject

	return WeaklyTypedOneOfReadOnlyObject1{
		ReadOnlyObject: &readOnlyObject,
		Type:           typ,
	}
}

func (u *WeaklyTypedOneOfReadOnlyObject1) UnmarshalJSON(data []byte) error {
	var d *json.Decoder

	simpleObject := new(SimpleObject)
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&simpleObject); err == nil {
		u.SimpleObject = simpleObject
		u.Type = WeaklyTypedOneOfReadOnlyObject1TypeSimpleObject
		return nil
	}

	readOnlyObject := new(ReadOnlyObject)
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&readOnlyObject); err == nil {
		u.ReadOnlyObject = readOnlyObject
		u.Type = WeaklyTypedOneOfReadOnlyObject1TypeReadOnlyObject
		return nil
	}

	return errors.New("could not unmarshal into supported union types")
}

func (u WeaklyTypedOneOfReadOnlyObject1) MarshalJSON() ([]byte, error) {
	if u.SimpleObject != nil {
		return json.Marshal(u.SimpleObject)
	}

	if u.ReadOnlyObject != nil {
		return json.Marshal(u.ReadOnlyObject)
	}

	return nil, nil
}
