// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"bytes"
	"encoding/json"
	"errors"
)

type PrimitiveTypeUnionType string

const (
	PrimitiveTypeUnionTypeStr     PrimitiveTypeUnionType = "str"
	PrimitiveTypeUnionTypeInteger PrimitiveTypeUnionType = "integer"
	PrimitiveTypeUnionTypeInt32   PrimitiveTypeUnionType = "int32"
	PrimitiveTypeUnionTypeNumber  PrimitiveTypeUnionType = "number"
	PrimitiveTypeUnionTypeFloat32 PrimitiveTypeUnionType = "float32"
	PrimitiveTypeUnionTypeBoolean PrimitiveTypeUnionType = "boolean"
)

type PrimitiveTypeUnion struct {
	Str     *string
	Integer *int64
	Int32   *int
	Number  *float64
	Float32 *float32
	Boolean *bool

	Type PrimitiveTypeUnionType
}

func CreatePrimitiveTypeUnionStr(str string) PrimitiveTypeUnion {
	typ := PrimitiveTypeUnionTypeStr

	return PrimitiveTypeUnion{
		Str:  &str,
		Type: typ,
	}
}

func CreatePrimitiveTypeUnionInteger(integer int64) PrimitiveTypeUnion {
	typ := PrimitiveTypeUnionTypeInteger

	return PrimitiveTypeUnion{
		Integer: &integer,
		Type:    typ,
	}
}

func CreatePrimitiveTypeUnionInt32(int32T int) PrimitiveTypeUnion {
	typ := PrimitiveTypeUnionTypeInt32

	return PrimitiveTypeUnion{
		Int32: &int32T,
		Type:  typ,
	}
}

func CreatePrimitiveTypeUnionNumber(number float64) PrimitiveTypeUnion {
	typ := PrimitiveTypeUnionTypeNumber

	return PrimitiveTypeUnion{
		Number: &number,
		Type:   typ,
	}
}

func CreatePrimitiveTypeUnionFloat32(float32T float32) PrimitiveTypeUnion {
	typ := PrimitiveTypeUnionTypeFloat32

	return PrimitiveTypeUnion{
		Float32: &float32T,
		Type:    typ,
	}
}

func CreatePrimitiveTypeUnionBoolean(boolean bool) PrimitiveTypeUnion {
	typ := PrimitiveTypeUnionTypeBoolean

	return PrimitiveTypeUnion{
		Boolean: &boolean,
		Type:    typ,
	}
}

func (u *PrimitiveTypeUnion) UnmarshalJSON(data []byte) error {
	var d *json.Decoder

	str := new(string)
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&str); err == nil {
		u.Str = str
		u.Type = PrimitiveTypeUnionTypeStr
		return nil
	}

	integer := new(int64)
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&integer); err == nil {
		u.Integer = integer
		u.Type = PrimitiveTypeUnionTypeInteger
		return nil
	}

	int32Var := new(int)
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&int32Var); err == nil {
		u.Int32 = int32Var
		u.Type = PrimitiveTypeUnionTypeInt32
		return nil
	}

	number := new(float64)
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&number); err == nil {
		u.Number = number
		u.Type = PrimitiveTypeUnionTypeNumber
		return nil
	}

	float32Var := new(float32)
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&float32Var); err == nil {
		u.Float32 = float32Var
		u.Type = PrimitiveTypeUnionTypeFloat32
		return nil
	}

	boolean := new(bool)
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&boolean); err == nil {
		u.Boolean = boolean
		u.Type = PrimitiveTypeUnionTypeBoolean
		return nil
	}

	return errors.New("could not unmarshal into supported union types")
}

func (u PrimitiveTypeUnion) MarshalJSON() ([]byte, error) {
	if u.Str != nil {
		return json.Marshal(u.Str)
	}

	if u.Integer != nil {
		return json.Marshal(u.Integer)
	}

	if u.Int32 != nil {
		return json.Marshal(u.Int32)
	}

	if u.Number != nil {
		return json.Marshal(u.Number)
	}

	if u.Float32 != nil {
		return json.Marshal(u.Float32)
	}

	if u.Boolean != nil {
		return json.Marshal(u.Boolean)
	}

	return nil, nil
}
