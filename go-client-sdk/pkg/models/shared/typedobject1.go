// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

type TypedObject1TypeEnum string

const (
	TypedObject1TypeEnumObj1 TypedObject1TypeEnum = "obj1"
)

func (e TypedObject1TypeEnum) ToPointer() *TypedObject1TypeEnum {
	return &e
}

func (e *TypedObject1TypeEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "obj1":
		*e = TypedObject1TypeEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for TypedObject1TypeEnum: %v", v)
	}
}

type TypedObject1 struct {
	Type  TypedObject1TypeEnum `json:"type"`
	Value string               `json:"value"`
}
