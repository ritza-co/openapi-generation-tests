// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"bytes"
	"encoding/json"
	"errors"
)

type WeaklyTypedOneOfReadOnlyObjectType string

const (
	WeaklyTypedOneOfReadOnlyObjectTypeSimpleObject        WeaklyTypedOneOfReadOnlyObjectType = "simpleObject"
	WeaklyTypedOneOfReadOnlyObjectTypeReadOnlyObjectInput WeaklyTypedOneOfReadOnlyObjectType = "readOnlyObjectInput"
)

type WeaklyTypedOneOfReadOnlyObject struct {
	SimpleObject        *SimpleObject
	ReadOnlyObjectInput *ReadOnlyObjectInput

	Type WeaklyTypedOneOfReadOnlyObjectType
}

func CreateWeaklyTypedOneOfReadOnlyObjectSimpleObject(simpleObject SimpleObject) WeaklyTypedOneOfReadOnlyObject {
	typ := WeaklyTypedOneOfReadOnlyObjectTypeSimpleObject

	return WeaklyTypedOneOfReadOnlyObject{
		SimpleObject: &simpleObject,
		Type:         typ,
	}
}

func CreateWeaklyTypedOneOfReadOnlyObjectReadOnlyObjectInput(readOnlyObjectInput ReadOnlyObjectInput) WeaklyTypedOneOfReadOnlyObject {
	typ := WeaklyTypedOneOfReadOnlyObjectTypeReadOnlyObjectInput

	return WeaklyTypedOneOfReadOnlyObject{
		ReadOnlyObjectInput: &readOnlyObjectInput,
		Type:                typ,
	}
}

func (u *WeaklyTypedOneOfReadOnlyObject) UnmarshalJSON(data []byte) error {
	var d *json.Decoder

	simpleObject := new(SimpleObject)
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&simpleObject); err == nil {
		u.SimpleObject = simpleObject
		u.Type = WeaklyTypedOneOfReadOnlyObjectTypeSimpleObject
		return nil
	}

	readOnlyObjectInput := new(ReadOnlyObjectInput)
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&readOnlyObjectInput); err == nil {
		u.ReadOnlyObjectInput = readOnlyObjectInput
		u.Type = WeaklyTypedOneOfReadOnlyObjectTypeReadOnlyObjectInput
		return nil
	}

	return errors.New("could not unmarshal into supported union types")
}

func (u WeaklyTypedOneOfReadOnlyObject) MarshalJSON() ([]byte, error) {
	if u.SimpleObject != nil {
		return json.Marshal(u.SimpleObject)
	}

	if u.ReadOnlyObjectInput != nil {
		return json.Marshal(u.ReadOnlyObjectInput)
	}

	return nil, nil
}
