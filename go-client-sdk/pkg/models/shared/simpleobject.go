// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
	"math/big"
	"openapi/pkg/types"
	"time"
)

// SimpleObjectInt32EnumEnum - An int32 enum property.
type SimpleObjectInt32EnumEnum int

const (
	SimpleObjectInt32EnumEnumFiftyFive              SimpleObjectInt32EnumEnum = 55
	SimpleObjectInt32EnumEnumSixtyNine              SimpleObjectInt32EnumEnum = 69
	SimpleObjectInt32EnumEnumOneHundredAndEightyOne SimpleObjectInt32EnumEnum = 181
)

func (e SimpleObjectInt32EnumEnum) ToPointer() *SimpleObjectInt32EnumEnum {
	return &e
}

func (e *SimpleObjectInt32EnumEnum) UnmarshalJSON(data []byte) error {
	var v int
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case 55:
		fallthrough
	case 69:
		fallthrough
	case 181:
		*e = SimpleObjectInt32EnumEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for SimpleObjectInt32EnumEnum: %v", v)
	}
}

// SimpleObjectIntEnumEnum - An integer enum property.
type SimpleObjectIntEnumEnum int64

const (
	SimpleObjectIntEnumEnumFirst  SimpleObjectIntEnumEnum = 1
	SimpleObjectIntEnumEnumSecond SimpleObjectIntEnumEnum = 2
	SimpleObjectIntEnumEnumThird  SimpleObjectIntEnumEnum = 3
)

func (e SimpleObjectIntEnumEnum) ToPointer() *SimpleObjectIntEnumEnum {
	return &e
}

func (e *SimpleObjectIntEnumEnum) UnmarshalJSON(data []byte) error {
	var v int64
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case 1:
		fallthrough
	case 2:
		fallthrough
	case 3:
		*e = SimpleObjectIntEnumEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for SimpleObjectIntEnumEnum: %v", v)
	}
}

// SimpleObject - A simple object that uses all our supported primitive types and enums and has optional properties.
// https://docs.speakeasyapi.dev - A link to the external docs.
type SimpleObject struct {
	// An any property.
	Any       interface{}   `json:"any" header:"name=any" pathParam:"name=any" queryParam:"name=any" form:"name=any" multipartForm:"name=any"`
	Bigint    *big.Int      `json:"bigint,omitempty" header:"name=bigint" pathParam:"name=bigint" queryParam:"name=bigint" form:"name=bigint" multipartForm:"name=bigint"`
	BigintStr *types.BigInt `json:"bigintStr,omitempty" header:"name=bigintStr" pathParam:"name=bigintStr" queryParam:"name=bigintStr" form:"name=bigintStr" multipartForm:"name=bigintStr"`
	// A boolean property.
	Bool bool `json:"bool" header:"name=bool" pathParam:"name=bool" queryParam:"name=bool" form:"name=bool" multipartForm:"name=bool"`
	// An optional boolean property.
	BoolOpt *bool `json:"boolOpt,omitempty" header:"name=boolOpt" pathParam:"name=boolOpt" queryParam:"name=boolOpt" form:"name=boolOpt" multipartForm:"name=boolOpt"`
	// A date property.
	Date types.Date `json:"date" header:"name=date" pathParam:"name=date" queryParam:"name=date" form:"name=date" multipartForm:"name=date"`
	// A date-time property.
	DateTime time.Time `json:"dateTime" header:"name=dateTime" pathParam:"name=dateTime" queryParam:"name=dateTime" form:"name=dateTime" multipartForm:"name=dateTime"`
	// An string based enum
	Enum EnumEnum `json:"enum" header:"name=enum" pathParam:"name=enum" queryParam:"name=enum" form:"name=enum" multipartForm:"name=enum"`
	// A float32 property.
	Float32 float64 `json:"float32" header:"name=float32" pathParam:"name=float32" queryParam:"name=float32" form:"name=float32" multipartForm:"name=float32"`
	// An integer property.
	Int int64 `json:"int" header:"name=int" pathParam:"name=int" queryParam:"name=int" form:"name=int" multipartForm:"name=int"`
	// An int32 property.
	Int32 int `json:"int32" header:"name=int32" pathParam:"name=int32" queryParam:"name=int32" form:"name=int32" multipartForm:"name=int32"`
	// An int32 enum property.
	Int32Enum SimpleObjectInt32EnumEnum `json:"int32Enum" header:"name=int32Enum" pathParam:"name=int32Enum" queryParam:"name=int32Enum" form:"name=int32Enum" multipartForm:"name=int32Enum"`
	// An integer enum property.
	IntEnum SimpleObjectIntEnumEnum `json:"intEnum" header:"name=intEnum" pathParam:"name=intEnum" queryParam:"name=intEnum" form:"name=intEnum" multipartForm:"name=intEnum"`
	// An optional integer property will be null for tests.
	IntOptNull *int64 `json:"intOptNull,omitempty" header:"name=intOptNull" pathParam:"name=intOptNull" queryParam:"name=intOptNull" form:"name=intOptNull" multipartForm:"name=intOptNull"`
	// A number property.
	Num float64 `json:"num" header:"name=num" pathParam:"name=num" queryParam:"name=num" form:"name=num" multipartForm:"name=num"`
	// An optional number property will be null for tests.
	NumOptNull *float64 `json:"numOptNull,omitempty" header:"name=numOptNull" pathParam:"name=numOptNull" queryParam:"name=numOptNull" form:"name=numOptNull" multipartForm:"name=numOptNull"`
	// A string property.
	Str string `json:"str" header:"name=str" pathParam:"name=str" queryParam:"name=str" form:"name=str" multipartForm:"name=str"`
	// An optional string property.
	StrOpt *string `json:"strOpt,omitempty" header:"name=strOpt" pathParam:"name=strOpt" queryParam:"name=strOpt" form:"name=strOpt" multipartForm:"name=strOpt"`
}
