// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

type DeepObject struct {
	Any  interface{}             `json:"any" form:"name=any,json" multipartForm:"name=any,json"`
	Arr  []SimpleObject          `json:"arr" form:"name=arr,json" multipartForm:"name=arr,json"`
	Bool bool                    `json:"bool" form:"name=bool" multipartForm:"name=bool"`
	Int  int64                   `json:"int" form:"name=int" multipartForm:"name=int"`
	Map  map[string]SimpleObject `json:"map" form:"name=map,json" multipartForm:"name=map,json"`
	Num  float64                 `json:"num" form:"name=num" multipartForm:"name=num"`
	// A simple object that uses all our supported primitive types and enums and has optional properties.
	Obj  SimpleObject `json:"obj" form:"name=obj,json" multipartForm:"name=obj,json"`
	Str  string       `json:"str" form:"name=str" multipartForm:"name=str"`
	Type *string      `json:"type,omitempty" form:"name=type" multipartForm:"name=type"`
}
