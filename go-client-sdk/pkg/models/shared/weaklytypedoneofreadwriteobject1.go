// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"bytes"
	"encoding/json"
	"errors"
)

type WeaklyTypedOneOfReadWriteObject1Type string

const (
	WeaklyTypedOneOfReadWriteObject1TypeSimpleObject          WeaklyTypedOneOfReadWriteObject1Type = "simpleObject"
	WeaklyTypedOneOfReadWriteObject1TypeReadWriteObjectOutput WeaklyTypedOneOfReadWriteObject1Type = "readWriteObjectOutput"
)

type WeaklyTypedOneOfReadWriteObject1 struct {
	SimpleObject          *SimpleObject
	ReadWriteObjectOutput *ReadWriteObjectOutput

	Type WeaklyTypedOneOfReadWriteObject1Type
}

func CreateWeaklyTypedOneOfReadWriteObject1SimpleObject(simpleObject SimpleObject) WeaklyTypedOneOfReadWriteObject1 {
	typ := WeaklyTypedOneOfReadWriteObject1TypeSimpleObject

	return WeaklyTypedOneOfReadWriteObject1{
		SimpleObject: &simpleObject,
		Type:         typ,
	}
}

func CreateWeaklyTypedOneOfReadWriteObject1ReadWriteObjectOutput(readWriteObjectOutput ReadWriteObjectOutput) WeaklyTypedOneOfReadWriteObject1 {
	typ := WeaklyTypedOneOfReadWriteObject1TypeReadWriteObjectOutput

	return WeaklyTypedOneOfReadWriteObject1{
		ReadWriteObjectOutput: &readWriteObjectOutput,
		Type:                  typ,
	}
}

func (u *WeaklyTypedOneOfReadWriteObject1) UnmarshalJSON(data []byte) error {
	var d *json.Decoder

	simpleObject := new(SimpleObject)
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&simpleObject); err == nil {
		u.SimpleObject = simpleObject
		u.Type = WeaklyTypedOneOfReadWriteObject1TypeSimpleObject
		return nil
	}

	readWriteObjectOutput := new(ReadWriteObjectOutput)
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&readWriteObjectOutput); err == nil {
		u.ReadWriteObjectOutput = readWriteObjectOutput
		u.Type = WeaklyTypedOneOfReadWriteObject1TypeReadWriteObjectOutput
		return nil
	}

	return errors.New("could not unmarshal into supported union types")
}

func (u WeaklyTypedOneOfReadWriteObject1) MarshalJSON() ([]byte, error) {
	if u.SimpleObject != nil {
		return json.Marshal(u.SimpleObject)
	}

	if u.ReadWriteObjectOutput != nil {
		return json.Marshal(u.ReadWriteObjectOutput)
	}

	return nil, nil
}
