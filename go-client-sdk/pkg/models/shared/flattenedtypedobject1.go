// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"bytes"
	"encoding/json"
	"errors"
)

type FlattenedTypedObject1Type string

const (
	FlattenedTypedObject1TypeTypedObject1 FlattenedTypedObject1Type = "typedObject1"
)

type FlattenedTypedObject1 struct {
	TypedObject1 *TypedObject1

	Type FlattenedTypedObject1Type
}

func CreateFlattenedTypedObject1TypedObject1(typedObject1 TypedObject1) FlattenedTypedObject1 {
	typ := FlattenedTypedObject1TypeTypedObject1

	return FlattenedTypedObject1{
		TypedObject1: &typedObject1,
		Type:         typ,
	}
}

func (u *FlattenedTypedObject1) UnmarshalJSON(data []byte) error {
	var d *json.Decoder

	typedObject1 := new(TypedObject1)
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&typedObject1); err == nil {
		u.TypedObject1 = typedObject1
		u.Type = FlattenedTypedObject1TypeTypedObject1
		return nil
	}

	return errors.New("could not unmarshal into supported union types")
}

func (u FlattenedTypedObject1) MarshalJSON() ([]byte, error) {
	if u.TypedObject1 != nil {
		return json.Marshal(u.TypedObject1)
	}

	return nil, nil
}
