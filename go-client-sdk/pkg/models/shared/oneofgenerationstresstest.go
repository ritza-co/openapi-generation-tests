// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"errors"
	"openapi/pkg/utils"
)

type OneOfGenerationStressTestOneOfFromArrayOfTypesType string

const (
	OneOfGenerationStressTestOneOfFromArrayOfTypesTypeStr     OneOfGenerationStressTestOneOfFromArrayOfTypesType = "str"
	OneOfGenerationStressTestOneOfFromArrayOfTypesTypeInteger OneOfGenerationStressTestOneOfFromArrayOfTypesType = "integer"
)

type OneOfGenerationStressTestOneOfFromArrayOfTypes struct {
	Str     *string
	Integer *int64

	Type OneOfGenerationStressTestOneOfFromArrayOfTypesType
}

func CreateOneOfGenerationStressTestOneOfFromArrayOfTypesStr(str string) OneOfGenerationStressTestOneOfFromArrayOfTypes {
	typ := OneOfGenerationStressTestOneOfFromArrayOfTypesTypeStr

	return OneOfGenerationStressTestOneOfFromArrayOfTypes{
		Str:  &str,
		Type: typ,
	}
}

func CreateOneOfGenerationStressTestOneOfFromArrayOfTypesInteger(integer int64) OneOfGenerationStressTestOneOfFromArrayOfTypes {
	typ := OneOfGenerationStressTestOneOfFromArrayOfTypesTypeInteger

	return OneOfGenerationStressTestOneOfFromArrayOfTypes{
		Integer: &integer,
		Type:    typ,
	}
}

func (u *OneOfGenerationStressTestOneOfFromArrayOfTypes) UnmarshalJSON(data []byte) error {

	str := new(string)
	if err := utils.UnmarshalJSON(data, &str, "", true, true); err == nil {
		u.Str = str
		u.Type = OneOfGenerationStressTestOneOfFromArrayOfTypesTypeStr
		return nil
	}

	integer := new(int64)
	if err := utils.UnmarshalJSON(data, &integer, "", true, true); err == nil {
		u.Integer = integer
		u.Type = OneOfGenerationStressTestOneOfFromArrayOfTypesTypeInteger
		return nil
	}

	return errors.New("could not unmarshal into supported union types")
}

func (u OneOfGenerationStressTestOneOfFromArrayOfTypes) MarshalJSON() ([]byte, error) {
	if u.Str != nil {
		return utils.MarshalJSON(u.Str, "", true)
	}

	if u.Integer != nil {
		return utils.MarshalJSON(u.Integer, "", true)
	}

	return nil, errors.New("could not marshal union type: all fields are null")
}

type OneOfGenerationStressTest struct {
	Any                   interface{}                                     `json:"any"`
	NullableAny           interface{}                                     `json:"nullableAny"`
	OneOfFromArrayOfTypes *OneOfGenerationStressTestOneOfFromArrayOfTypes `json:"oneOfFromArrayOfTypes"`
	OneOfSameType         interface{}                                     `json:"oneOfSameType"`
}

func (o *OneOfGenerationStressTest) GetAny() interface{} {
	if o == nil {
		return nil
	}
	return o.Any
}

func (o *OneOfGenerationStressTest) GetNullableAny() interface{} {
	if o == nil {
		return nil
	}
	return o.NullableAny
}

func (o *OneOfGenerationStressTest) GetOneOfFromArrayOfTypes() *OneOfGenerationStressTestOneOfFromArrayOfTypes {
	if o == nil {
		return nil
	}
	return o.OneOfFromArrayOfTypes
}

func (o *OneOfGenerationStressTest) GetOneOfSameType() interface{} {
	if o == nil {
		return nil
	}
	return o.OneOfSameType
}
