// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"bytes"
	"encoding/json"
	"errors"
)

type WeaklyTypedOneOfReadWriteObjectOutputType string

const (
	WeaklyTypedOneOfReadWriteObjectOutputTypeSimpleObject          WeaklyTypedOneOfReadWriteObjectOutputType = "simpleObject"
	WeaklyTypedOneOfReadWriteObjectOutputTypeReadWriteObjectOutput WeaklyTypedOneOfReadWriteObjectOutputType = "readWriteObjectOutput"
)

type WeaklyTypedOneOfReadWriteObjectOutput struct {
	SimpleObject          *SimpleObject
	ReadWriteObjectOutput *ReadWriteObjectOutput

	Type WeaklyTypedOneOfReadWriteObjectOutputType
}

func CreateWeaklyTypedOneOfReadWriteObjectOutputSimpleObject(simpleObject SimpleObject) WeaklyTypedOneOfReadWriteObjectOutput {
	typ := WeaklyTypedOneOfReadWriteObjectOutputTypeSimpleObject

	return WeaklyTypedOneOfReadWriteObjectOutput{
		SimpleObject: &simpleObject,
		Type:         typ,
	}
}

func CreateWeaklyTypedOneOfReadWriteObjectOutputReadWriteObjectOutput(readWriteObjectOutput ReadWriteObjectOutput) WeaklyTypedOneOfReadWriteObjectOutput {
	typ := WeaklyTypedOneOfReadWriteObjectOutputTypeReadWriteObjectOutput

	return WeaklyTypedOneOfReadWriteObjectOutput{
		ReadWriteObjectOutput: &readWriteObjectOutput,
		Type:                  typ,
	}
}

func (u *WeaklyTypedOneOfReadWriteObjectOutput) UnmarshalJSON(data []byte) error {
	var d *json.Decoder

	readWriteObjectOutput := new(ReadWriteObjectOutput)
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&readWriteObjectOutput); err == nil {
		u.ReadWriteObjectOutput = readWriteObjectOutput
		u.Type = WeaklyTypedOneOfReadWriteObjectOutputTypeReadWriteObjectOutput
		return nil
	}

	simpleObject := new(SimpleObject)
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&simpleObject); err == nil {
		u.SimpleObject = simpleObject
		u.Type = WeaklyTypedOneOfReadWriteObjectOutputTypeSimpleObject
		return nil
	}

	return errors.New("could not unmarshal into supported union types")
}

func (u WeaklyTypedOneOfReadWriteObjectOutput) MarshalJSON() ([]byte, error) {
	if u.ReadWriteObjectOutput != nil {
		return json.Marshal(u.ReadWriteObjectOutput)
	}

	if u.SimpleObject != nil {
		return json.Marshal(u.SimpleObject)
	}

	return nil, errors.New("could not marshal union type: all fields are null")

}
