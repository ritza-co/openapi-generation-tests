// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"bytes"
	"encoding/json"
	"errors"
)

type WeaklyTypedOneOfWriteOnlyObjectOutputType string

const (
	WeaklyTypedOneOfWriteOnlyObjectOutputTypeSimpleObject          WeaklyTypedOneOfWriteOnlyObjectOutputType = "simpleObject"
	WeaklyTypedOneOfWriteOnlyObjectOutputTypeWriteOnlyObjectOutput WeaklyTypedOneOfWriteOnlyObjectOutputType = "writeOnlyObjectOutput"
)

type WeaklyTypedOneOfWriteOnlyObjectOutput struct {
	SimpleObject          *SimpleObject
	WriteOnlyObjectOutput *WriteOnlyObjectOutput

	Type WeaklyTypedOneOfWriteOnlyObjectOutputType
}

func CreateWeaklyTypedOneOfWriteOnlyObjectOutputSimpleObject(simpleObject SimpleObject) WeaklyTypedOneOfWriteOnlyObjectOutput {
	typ := WeaklyTypedOneOfWriteOnlyObjectOutputTypeSimpleObject

	return WeaklyTypedOneOfWriteOnlyObjectOutput{
		SimpleObject: &simpleObject,
		Type:         typ,
	}
}

func CreateWeaklyTypedOneOfWriteOnlyObjectOutputWriteOnlyObjectOutput(writeOnlyObjectOutput WriteOnlyObjectOutput) WeaklyTypedOneOfWriteOnlyObjectOutput {
	typ := WeaklyTypedOneOfWriteOnlyObjectOutputTypeWriteOnlyObjectOutput

	return WeaklyTypedOneOfWriteOnlyObjectOutput{
		WriteOnlyObjectOutput: &writeOnlyObjectOutput,
		Type:                  typ,
	}
}

func (u *WeaklyTypedOneOfWriteOnlyObjectOutput) UnmarshalJSON(data []byte) error {
	var d *json.Decoder

	writeOnlyObjectOutput := new(WriteOnlyObjectOutput)
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&writeOnlyObjectOutput); err == nil {
		u.WriteOnlyObjectOutput = writeOnlyObjectOutput
		u.Type = WeaklyTypedOneOfWriteOnlyObjectOutputTypeWriteOnlyObjectOutput
		return nil
	}

	simpleObject := new(SimpleObject)
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&simpleObject); err == nil {
		u.SimpleObject = simpleObject
		u.Type = WeaklyTypedOneOfWriteOnlyObjectOutputTypeSimpleObject
		return nil
	}

	return errors.New("could not unmarshal into supported union types")
}

func (u WeaklyTypedOneOfWriteOnlyObjectOutput) MarshalJSON() ([]byte, error) {
	if u.WriteOnlyObjectOutput != nil {
		return json.Marshal(u.WriteOnlyObjectOutput)
	}

	if u.SimpleObject != nil {
		return json.Marshal(u.SimpleObject)
	}

	return nil, nil
}
