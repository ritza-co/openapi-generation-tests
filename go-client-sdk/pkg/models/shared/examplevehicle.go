// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"bytes"
	"encoding/json"
	"errors"
)

type ExampleVehicleType string

const (
	ExampleVehicleTypeExampleBoat ExampleVehicleType = "ExampleBoat"
	ExampleVehicleTypeExampleCar  ExampleVehicleType = "ExampleCar"
)

type ExampleVehicle struct {
	ExampleBoat *ExampleBoat
	ExampleCar  *ExampleCar

	Type ExampleVehicleType
}

func CreateExampleVehicleExampleBoat(exampleBoat ExampleBoat) ExampleVehicle {
	typ := ExampleVehicleTypeExampleBoat

	return ExampleVehicle{
		ExampleBoat: &exampleBoat,
		Type:        typ,
	}
}

func CreateExampleVehicleExampleCar(exampleCar ExampleCar) ExampleVehicle {
	typ := ExampleVehicleTypeExampleCar

	return ExampleVehicle{
		ExampleCar: &exampleCar,
		Type:       typ,
	}
}

func (u *ExampleVehicle) UnmarshalJSON(data []byte) error {
	var d *json.Decoder

	exampleBoat := new(ExampleBoat)
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&exampleBoat); err == nil {
		u.ExampleBoat = exampleBoat
		u.Type = ExampleVehicleTypeExampleBoat
		return nil
	}

	exampleCar := new(ExampleCar)
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&exampleCar); err == nil {
		u.ExampleCar = exampleCar
		u.Type = ExampleVehicleTypeExampleCar
		return nil
	}

	return errors.New("could not unmarshal into supported union types")
}

func (u ExampleVehicle) MarshalJSON() ([]byte, error) {
	if u.ExampleBoat != nil {
		return json.Marshal(u.ExampleBoat)
	}

	if u.ExampleCar != nil {
		return json.Marshal(u.ExampleCar)
	}

	return nil, nil
}
