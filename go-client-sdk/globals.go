// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package sdk

import (
	"context"
	"fmt"
	"net/http"
	"openapi/pkg/models/operations"
	"openapi/pkg/utils"
	"strings"
)

// globals - Endpoints for testing global parameters.
type globals struct {
	defaultClient  HTTPClient
	securityClient HTTPClient
	serverURL      string
	language       string
	sdkVersion     string
	genVersion     string
	globals        map[string]map[string]map[string]interface{}
}

func newGlobals(defaultClient, securityClient HTTPClient, serverURL, language, sdkVersion, genVersion string, gbls map[string]map[string]map[string]interface{}) *globals {
	return &globals{
		defaultClient:  defaultClient,
		securityClient: securityClient,
		serverURL:      serverURL,
		language:       language,
		sdkVersion:     sdkVersion,
		genVersion:     genVersion,
		globals:        gbls,
	}
}

func (s *globals) GlobalPathParameterGet(ctx context.Context, globalPathParam *int64) (*operations.GlobalPathParameterGetResponse, error) {
	request := operations.GlobalPathParameterGetRequest{
		GlobalPathParam: globalPathParam,
	}

	baseURL := s.serverURL
	url, err := utils.GenerateURL(ctx, baseURL, "/anything/globals/pathParameter/{globalPathParam}", request, s.globals)
	if err != nil {
		return nil, fmt.Errorf("error generating URL: %w", err)
	}

	req, err := http.NewRequestWithContext(ctx, "GET", url, nil)
	if err != nil {
		return nil, fmt.Errorf("error creating request: %w", err)
	}
	req.Header.Set("user-agent", fmt.Sprintf("speakeasy-sdk/%s %s %s", s.language, s.sdkVersion, s.genVersion))

	client := s.securityClient

	httpRes, err := client.Do(req)
	if err != nil {
		return nil, fmt.Errorf("error sending request: %w", err)
	}
	if httpRes == nil {
		return nil, fmt.Errorf("error sending request: no response")
	}
	defer httpRes.Body.Close()

	contentType := httpRes.Header.Get("Content-Type")

	res := &operations.GlobalPathParameterGetResponse{
		StatusCode:  httpRes.StatusCode,
		ContentType: contentType,
		RawResponse: httpRes,
	}
	switch {
	case httpRes.StatusCode == 200:
		switch {
		case utils.MatchContentType(contentType, `application/json`):
			var out *operations.GlobalPathParameterGetRes
			if err := utils.UnmarshalJsonFromResponseBody(httpRes.Body, &out); err != nil {
				return nil, err
			}

			res.Res = out
		}
	}

	return res, nil
}

func (s *globals) GlobalsQueryParameterGet(ctx context.Context, globalQueryParam *string) (*operations.GlobalsQueryParameterGetResponse, error) {
	request := operations.GlobalsQueryParameterGetRequest{
		GlobalQueryParam: globalQueryParam,
	}

	baseURL := s.serverURL
	url := strings.TrimSuffix(baseURL, "/") + "/anything/globals/queryParameter"

	req, err := http.NewRequestWithContext(ctx, "GET", url, nil)
	if err != nil {
		return nil, fmt.Errorf("error creating request: %w", err)
	}
	req.Header.Set("user-agent", fmt.Sprintf("speakeasy-sdk/%s %s %s", s.language, s.sdkVersion, s.genVersion))

	if err := utils.PopulateQueryParams(ctx, req, request, s.globals); err != nil {
		return nil, fmt.Errorf("error populating query params: %w", err)
	}

	client := s.securityClient

	httpRes, err := client.Do(req)
	if err != nil {
		return nil, fmt.Errorf("error sending request: %w", err)
	}
	if httpRes == nil {
		return nil, fmt.Errorf("error sending request: no response")
	}
	defer httpRes.Body.Close()

	contentType := httpRes.Header.Get("Content-Type")

	res := &operations.GlobalsQueryParameterGetResponse{
		StatusCode:  httpRes.StatusCode,
		ContentType: contentType,
		RawResponse: httpRes,
	}
	switch {
	case httpRes.StatusCode == 200:
		switch {
		case utils.MatchContentType(contentType, `application/json`):
			var out *operations.GlobalsQueryParameterGetRes
			if err := utils.UnmarshalJsonFromResponseBody(httpRes.Body, &out); err != nil {
				return nil, err
			}

			res.Res = out
		}
	}

	return res, nil
}
