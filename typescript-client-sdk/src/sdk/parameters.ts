/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as utils from "../internal/utils";
import * as operations from "./models/operations";
import { AxiosInstance, AxiosRequestConfig, AxiosResponse } from "axios";

/**
 * Endpoints for testing parameters.
 */
export class ParametersT {
  _defaultClient: AxiosInstance;
  _securityClient: AxiosInstance;
  _serverURL: string;
  _language: string;
  _sdkVersion: string;
  _genVersion: string;
  _globals: any;

  constructor(
    defaultClient: AxiosInstance,
    securityClient: AxiosInstance,
    serverURL: string,
    language: string,
    sdkVersion: string,
    genVersion: string,
    globals: any
  ) {
    this._defaultClient = defaultClient;
    this._securityClient = securityClient;
    this._serverURL = serverURL;
    this._language = language;
    this._sdkVersion = sdkVersion;
    this._genVersion = genVersion;
    this._globals = globals;
  }

  async deepObjectQueryParamsMap(
    req: operations.DeepObjectQueryParamsMapRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.DeepObjectQueryParamsMapResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.DeepObjectQueryParamsMapRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string =
      baseURL.replace(/\/$/, "") + "/anything/queryParams/deepObject/map";

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const queryParams: string = utils.serializeQueryParams(req, this._globals);

    const httpRes: AxiosResponse = await client.request({
      validateStatus: () => true,
      url: url + queryParams,
      method: "get",
      ...config,
    });

    const contentType: string = httpRes?.headers?.["content-type"] ?? "";

    if (httpRes?.status == null) {
      throw new Error(`status code not found in response: ${httpRes}`);
    }

    const res: operations.DeepObjectQueryParamsMapResponse =
      new operations.DeepObjectQueryParamsMapResponse({
        statusCode: httpRes.status,
        contentType: contentType,
        rawResponse: httpRes,
      });
    switch (true) {
      case httpRes?.status == 200:
        if (utils.matchContentType(contentType, `application/json`)) {
          res.res = utils.objectToClass(
            httpRes?.data,
            operations.DeepObjectQueryParamsMapRes
          );
        }
        break;
    }

    return res;
  }

  async deepObjectQueryParamsObject(
    req: operations.DeepObjectQueryParamsObjectRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.DeepObjectQueryParamsObjectResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.DeepObjectQueryParamsObjectRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string =
      baseURL.replace(/\/$/, "") + "/anything/queryParams/deepObject/obj";

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const queryParams: string = utils.serializeQueryParams(req, this._globals);

    const httpRes: AxiosResponse = await client.request({
      validateStatus: () => true,
      url: url + queryParams,
      method: "get",
      ...config,
    });

    const contentType: string = httpRes?.headers?.["content-type"] ?? "";

    if (httpRes?.status == null) {
      throw new Error(`status code not found in response: ${httpRes}`);
    }

    const res: operations.DeepObjectQueryParamsObjectResponse =
      new operations.DeepObjectQueryParamsObjectResponse({
        statusCode: httpRes.status,
        contentType: contentType,
        rawResponse: httpRes,
      });
    switch (true) {
      case httpRes?.status == 200:
        if (utils.matchContentType(contentType, `application/json`)) {
          res.res = utils.objectToClass(
            httpRes?.data,
            operations.DeepObjectQueryParamsObjectRes
          );
        }
        break;
    }

    return res;
  }

  async formQueryParamsArray(
    req: operations.FormQueryParamsArrayRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.FormQueryParamsArrayResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.FormQueryParamsArrayRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string =
      baseURL.replace(/\/$/, "") + "/anything/queryParams/form/array";

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const queryParams: string = utils.serializeQueryParams(req, this._globals);

    const httpRes: AxiosResponse = await client.request({
      validateStatus: () => true,
      url: url + queryParams,
      method: "get",
      ...config,
    });

    const contentType: string = httpRes?.headers?.["content-type"] ?? "";

    if (httpRes?.status == null) {
      throw new Error(`status code not found in response: ${httpRes}`);
    }

    const res: operations.FormQueryParamsArrayResponse =
      new operations.FormQueryParamsArrayResponse({
        statusCode: httpRes.status,
        contentType: contentType,
        rawResponse: httpRes,
      });
    switch (true) {
      case httpRes?.status == 200:
        if (utils.matchContentType(contentType, `application/json`)) {
          res.res = utils.objectToClass(
            httpRes?.data,
            operations.FormQueryParamsArrayRes
          );
        }
        break;
    }

    return res;
  }

  async formQueryParamsMap(
    req: operations.FormQueryParamsMapRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.FormQueryParamsMapResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.FormQueryParamsMapRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string =
      baseURL.replace(/\/$/, "") + "/anything/queryParams/form/map";

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const queryParams: string = utils.serializeQueryParams(req, this._globals);

    const httpRes: AxiosResponse = await client.request({
      validateStatus: () => true,
      url: url + queryParams,
      method: "get",
      ...config,
    });

    const contentType: string = httpRes?.headers?.["content-type"] ?? "";

    if (httpRes?.status == null) {
      throw new Error(`status code not found in response: ${httpRes}`);
    }

    const res: operations.FormQueryParamsMapResponse =
      new operations.FormQueryParamsMapResponse({
        statusCode: httpRes.status,
        contentType: contentType,
        rawResponse: httpRes,
      });
    switch (true) {
      case httpRes?.status == 200:
        if (utils.matchContentType(contentType, `application/json`)) {
          res.res = utils.objectToClass(
            httpRes?.data,
            operations.FormQueryParamsMapRes
          );
        }
        break;
    }

    return res;
  }

  async formQueryParamsObject(
    req: operations.FormQueryParamsObjectRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.FormQueryParamsObjectResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.FormQueryParamsObjectRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string =
      baseURL.replace(/\/$/, "") + "/anything/queryParams/form/obj";

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const queryParams: string = utils.serializeQueryParams(req, this._globals);

    const httpRes: AxiosResponse = await client.request({
      validateStatus: () => true,
      url: url + queryParams,
      method: "get",
      ...config,
    });

    const contentType: string = httpRes?.headers?.["content-type"] ?? "";

    if (httpRes?.status == null) {
      throw new Error(`status code not found in response: ${httpRes}`);
    }

    const res: operations.FormQueryParamsObjectResponse =
      new operations.FormQueryParamsObjectResponse({
        statusCode: httpRes.status,
        contentType: contentType,
        rawResponse: httpRes,
      });
    switch (true) {
      case httpRes?.status == 200:
        if (utils.matchContentType(contentType, `application/json`)) {
          res.res = utils.objectToClass(
            httpRes?.data,
            operations.FormQueryParamsObjectRes
          );
        }
        break;
    }

    return res;
  }

  async formQueryParamsPrimitive(
    req: operations.FormQueryParamsPrimitiveRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.FormQueryParamsPrimitiveResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.FormQueryParamsPrimitiveRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string =
      baseURL.replace(/\/$/, "") + "/anything/queryParams/form/primitive";

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const queryParams: string = utils.serializeQueryParams(req, this._globals);

    const httpRes: AxiosResponse = await client.request({
      validateStatus: () => true,
      url: url + queryParams,
      method: "get",
      ...config,
    });

    const contentType: string = httpRes?.headers?.["content-type"] ?? "";

    if (httpRes?.status == null) {
      throw new Error(`status code not found in response: ${httpRes}`);
    }

    const res: operations.FormQueryParamsPrimitiveResponse =
      new operations.FormQueryParamsPrimitiveResponse({
        statusCode: httpRes.status,
        contentType: contentType,
        rawResponse: httpRes,
      });
    switch (true) {
      case httpRes?.status == 200:
        if (utils.matchContentType(contentType, `application/json`)) {
          res.res = utils.objectToClass(
            httpRes?.data,
            operations.FormQueryParamsPrimitiveRes
          );
        }
        break;
    }

    return res;
  }

  async formQueryParamsRefParamObject(
    req: operations.FormQueryParamsRefParamObjectRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.FormQueryParamsRefParamObjectResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.FormQueryParamsRefParamObjectRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string =
      baseURL.replace(/\/$/, "") + "/anything/queryParams/form/refParamObject";

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const queryParams: string = utils.serializeQueryParams(req, this._globals);

    const httpRes: AxiosResponse = await client.request({
      validateStatus: () => true,
      url: url + queryParams,
      method: "get",
      ...config,
    });

    const contentType: string = httpRes?.headers?.["content-type"] ?? "";

    if (httpRes?.status == null) {
      throw new Error(`status code not found in response: ${httpRes}`);
    }

    const res: operations.FormQueryParamsRefParamObjectResponse =
      new operations.FormQueryParamsRefParamObjectResponse({
        statusCode: httpRes.status,
        contentType: contentType,
        rawResponse: httpRes,
      });
    switch (true) {
      case httpRes?.status == 200:
        if (utils.matchContentType(contentType, `application/json`)) {
          res.res = utils.objectToClass(
            httpRes?.data,
            operations.FormQueryParamsRefParamObjectRes
          );
        }
        break;
    }

    return res;
  }

  async headerParamsArray(
    req: operations.HeaderParamsArrayRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.HeaderParamsArrayResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.HeaderParamsArrayRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = baseURL.replace(/\/$/, "") + "/anything/headers/array";

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const headers = { ...utils.getHeadersFromRequest(req), ...config?.headers };

    const httpRes: AxiosResponse = await client.request({
      validateStatus: () => true,
      url: url,
      method: "get",
      headers: headers,
      ...config,
    });

    const contentType: string = httpRes?.headers?.["content-type"] ?? "";

    if (httpRes?.status == null) {
      throw new Error(`status code not found in response: ${httpRes}`);
    }

    const res: operations.HeaderParamsArrayResponse =
      new operations.HeaderParamsArrayResponse({
        statusCode: httpRes.status,
        contentType: contentType,
        rawResponse: httpRes,
      });
    switch (true) {
      case httpRes?.status == 200:
        if (utils.matchContentType(contentType, `application/json`)) {
          res.res = utils.objectToClass(
            httpRes?.data,
            operations.HeaderParamsArrayRes
          );
        }
        break;
    }

    return res;
  }

  async headerParamsMap(
    req: operations.HeaderParamsMapRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.HeaderParamsMapResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.HeaderParamsMapRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = baseURL.replace(/\/$/, "") + "/anything/headers/map";

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const headers = { ...utils.getHeadersFromRequest(req), ...config?.headers };

    const httpRes: AxiosResponse = await client.request({
      validateStatus: () => true,
      url: url,
      method: "get",
      headers: headers,
      ...config,
    });

    const contentType: string = httpRes?.headers?.["content-type"] ?? "";

    if (httpRes?.status == null) {
      throw new Error(`status code not found in response: ${httpRes}`);
    }

    const res: operations.HeaderParamsMapResponse =
      new operations.HeaderParamsMapResponse({
        statusCode: httpRes.status,
        contentType: contentType,
        rawResponse: httpRes,
      });
    switch (true) {
      case httpRes?.status == 200:
        if (utils.matchContentType(contentType, `application/json`)) {
          res.res = utils.objectToClass(
            httpRes?.data,
            operations.HeaderParamsMapRes
          );
        }
        break;
    }

    return res;
  }

  async headerParamsObject(
    req: operations.HeaderParamsObjectRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.HeaderParamsObjectResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.HeaderParamsObjectRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = baseURL.replace(/\/$/, "") + "/anything/headers/obj";

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const headers = { ...utils.getHeadersFromRequest(req), ...config?.headers };

    const httpRes: AxiosResponse = await client.request({
      validateStatus: () => true,
      url: url,
      method: "get",
      headers: headers,
      ...config,
    });

    const contentType: string = httpRes?.headers?.["content-type"] ?? "";

    if (httpRes?.status == null) {
      throw new Error(`status code not found in response: ${httpRes}`);
    }

    const res: operations.HeaderParamsObjectResponse =
      new operations.HeaderParamsObjectResponse({
        statusCode: httpRes.status,
        contentType: contentType,
        rawResponse: httpRes,
      });
    switch (true) {
      case httpRes?.status == 200:
        if (utils.matchContentType(contentType, `application/json`)) {
          res.res = utils.objectToClass(
            httpRes?.data,
            operations.HeaderParamsObjectRes
          );
        }
        break;
    }

    return res;
  }

  async headerParamsPrimitive(
    req: operations.HeaderParamsPrimitiveRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.HeaderParamsPrimitiveResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.HeaderParamsPrimitiveRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string =
      baseURL.replace(/\/$/, "") + "/anything/headers/primitive";

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const headers = { ...utils.getHeadersFromRequest(req), ...config?.headers };

    const httpRes: AxiosResponse = await client.request({
      validateStatus: () => true,
      url: url,
      method: "get",
      headers: headers,
      ...config,
    });

    const contentType: string = httpRes?.headers?.["content-type"] ?? "";

    if (httpRes?.status == null) {
      throw new Error(`status code not found in response: ${httpRes}`);
    }

    const res: operations.HeaderParamsPrimitiveResponse =
      new operations.HeaderParamsPrimitiveResponse({
        statusCode: httpRes.status,
        contentType: contentType,
        rawResponse: httpRes,
      });
    switch (true) {
      case httpRes?.status == 200:
        if (utils.matchContentType(contentType, `application/json`)) {
          res.res = utils.objectToClass(
            httpRes?.data,
            operations.HeaderParamsPrimitiveRes
          );
        }
        break;
    }

    return res;
  }

  async jsonQueryParamsObject(
    req: operations.JsonQueryParamsObjectRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.JsonQueryParamsObjectResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.JsonQueryParamsObjectRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string =
      baseURL.replace(/\/$/, "") + "/anything/queryParams/json/obj";

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const queryParams: string = utils.serializeQueryParams(req, this._globals);

    const httpRes: AxiosResponse = await client.request({
      validateStatus: () => true,
      url: url + queryParams,
      method: "get",
      ...config,
    });

    const contentType: string = httpRes?.headers?.["content-type"] ?? "";

    if (httpRes?.status == null) {
      throw new Error(`status code not found in response: ${httpRes}`);
    }

    const res: operations.JsonQueryParamsObjectResponse =
      new operations.JsonQueryParamsObjectResponse({
        statusCode: httpRes.status,
        contentType: contentType,
        rawResponse: httpRes,
      });
    switch (true) {
      case httpRes?.status == 200:
        if (utils.matchContentType(contentType, `application/json`)) {
          res.res = utils.objectToClass(
            httpRes?.data,
            operations.JsonQueryParamsObjectRes
          );
        }
        break;
    }

    return res;
  }

  async mixedQueryParams(
    req: operations.MixedQueryParamsRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.MixedQueryParamsResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.MixedQueryParamsRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string =
      baseURL.replace(/\/$/, "") + "/anything/queryParams/mixed";

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const queryParams: string = utils.serializeQueryParams(req, this._globals);

    const httpRes: AxiosResponse = await client.request({
      validateStatus: () => true,
      url: url + queryParams,
      method: "get",
      ...config,
    });

    const contentType: string = httpRes?.headers?.["content-type"] ?? "";

    if (httpRes?.status == null) {
      throw new Error(`status code not found in response: ${httpRes}`);
    }

    const res: operations.MixedQueryParamsResponse =
      new operations.MixedQueryParamsResponse({
        statusCode: httpRes.status,
        contentType: contentType,
        rawResponse: httpRes,
      });
    switch (true) {
      case httpRes?.status == 200:
        if (utils.matchContentType(contentType, `application/json`)) {
          res.res = utils.objectToClass(
            httpRes?.data,
            operations.MixedQueryParamsRes
          );
        }
        break;
    }

    return res;
  }

  async pathParameterJson(
    req: operations.PathParameterJsonRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.PathParameterJsonResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.PathParameterJsonRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/anything/pathParams/json/{jsonObj}",
      req,
      this._globals
    );

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const httpRes: AxiosResponse = await client.request({
      validateStatus: () => true,
      url: url,
      method: "get",
      ...config,
    });

    const contentType: string = httpRes?.headers?.["content-type"] ?? "";

    if (httpRes?.status == null) {
      throw new Error(`status code not found in response: ${httpRes}`);
    }

    const res: operations.PathParameterJsonResponse =
      new operations.PathParameterJsonResponse({
        statusCode: httpRes.status,
        contentType: contentType,
        rawResponse: httpRes,
      });
    switch (true) {
      case httpRes?.status == 200:
        if (utils.matchContentType(contentType, `application/json`)) {
          res.res = utils.objectToClass(
            httpRes?.data,
            operations.PathParameterJsonRes
          );
        }
        break;
    }

    return res;
  }

  async pipeDelimitedQueryParamsArray(
    req: operations.PipeDelimitedQueryParamsArrayRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.PipeDelimitedQueryParamsArrayResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.PipeDelimitedQueryParamsArrayRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string =
      baseURL.replace(/\/$/, "") + "/anything/queryParams/pipe/array";

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const queryParams: string = utils.serializeQueryParams(req, this._globals);

    const httpRes: AxiosResponse = await client.request({
      validateStatus: () => true,
      url: url + queryParams,
      method: "get",
      ...config,
    });

    const contentType: string = httpRes?.headers?.["content-type"] ?? "";

    if (httpRes?.status == null) {
      throw new Error(`status code not found in response: ${httpRes}`);
    }

    const res: operations.PipeDelimitedQueryParamsArrayResponse =
      new operations.PipeDelimitedQueryParamsArrayResponse({
        statusCode: httpRes.status,
        contentType: contentType,
        rawResponse: httpRes,
      });
    switch (true) {
      case httpRes?.status == 200:
        if (utils.matchContentType(contentType, `application/json`)) {
          res.res = utils.objectToClass(
            httpRes?.data,
            operations.PipeDelimitedQueryParamsArrayRes
          );
        }
        break;
    }

    return res;
  }

  async simplePathParameterArrays(
    req: operations.SimplePathParameterArraysRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.SimplePathParameterArraysResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.SimplePathParameterArraysRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/anything/pathParams/arr/{arrParam}",
      req,
      this._globals
    );

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const httpRes: AxiosResponse = await client.request({
      validateStatus: () => true,
      url: url,
      method: "get",
      ...config,
    });

    const contentType: string = httpRes?.headers?.["content-type"] ?? "";

    if (httpRes?.status == null) {
      throw new Error(`status code not found in response: ${httpRes}`);
    }

    const res: operations.SimplePathParameterArraysResponse =
      new operations.SimplePathParameterArraysResponse({
        statusCode: httpRes.status,
        contentType: contentType,
        rawResponse: httpRes,
      });
    switch (true) {
      case httpRes?.status == 200:
        if (utils.matchContentType(contentType, `application/json`)) {
          res.res = utils.objectToClass(
            httpRes?.data,
            operations.SimplePathParameterArraysRes
          );
        }
        break;
    }

    return res;
  }

  async simplePathParameterMaps(
    req: operations.SimplePathParameterMapsRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.SimplePathParameterMapsResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.SimplePathParameterMapsRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/anything/pathParams/map/{mapParam}/mapExploded/{mapParamExploded}",
      req,
      this._globals
    );

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const httpRes: AxiosResponse = await client.request({
      validateStatus: () => true,
      url: url,
      method: "get",
      ...config,
    });

    const contentType: string = httpRes?.headers?.["content-type"] ?? "";

    if (httpRes?.status == null) {
      throw new Error(`status code not found in response: ${httpRes}`);
    }

    const res: operations.SimplePathParameterMapsResponse =
      new operations.SimplePathParameterMapsResponse({
        statusCode: httpRes.status,
        contentType: contentType,
        rawResponse: httpRes,
      });
    switch (true) {
      case httpRes?.status == 200:
        if (utils.matchContentType(contentType, `application/json`)) {
          res.res = utils.objectToClass(
            httpRes?.data,
            operations.SimplePathParameterMapsRes
          );
        }
        break;
    }

    return res;
  }

  async simplePathParameterObjects(
    req: operations.SimplePathParameterObjectsRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.SimplePathParameterObjectsResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.SimplePathParameterObjectsRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/anything/pathParams/obj/{objParam}/objExploded/{objParamExploded}",
      req,
      this._globals
    );

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const httpRes: AxiosResponse = await client.request({
      validateStatus: () => true,
      url: url,
      method: "get",
      ...config,
    });

    const contentType: string = httpRes?.headers?.["content-type"] ?? "";

    if (httpRes?.status == null) {
      throw new Error(`status code not found in response: ${httpRes}`);
    }

    const res: operations.SimplePathParameterObjectsResponse =
      new operations.SimplePathParameterObjectsResponse({
        statusCode: httpRes.status,
        contentType: contentType,
        rawResponse: httpRes,
      });
    switch (true) {
      case httpRes?.status == 200:
        if (utils.matchContentType(contentType, `application/json`)) {
          res.res = utils.objectToClass(
            httpRes?.data,
            operations.SimplePathParameterObjectsRes
          );
        }
        break;
    }

    return res;
  }

  async simplePathParameterPrimitives(
    req: operations.SimplePathParameterPrimitivesRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.SimplePathParameterPrimitivesResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.SimplePathParameterPrimitivesRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/anything/pathParams/str/{strParam}/bool/{boolParam}/int/{intParam}/num/{numParam}",
      req,
      this._globals
    );

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const httpRes: AxiosResponse = await client.request({
      validateStatus: () => true,
      url: url,
      method: "get",
      ...config,
    });

    const contentType: string = httpRes?.headers?.["content-type"] ?? "";

    if (httpRes?.status == null) {
      throw new Error(`status code not found in response: ${httpRes}`);
    }

    const res: operations.SimplePathParameterPrimitivesResponse =
      new operations.SimplePathParameterPrimitivesResponse({
        statusCode: httpRes.status,
        contentType: contentType,
        rawResponse: httpRes,
      });
    switch (true) {
      case httpRes?.status == 200:
        if (utils.matchContentType(contentType, `application/json`)) {
          res.res = utils.objectToClass(
            httpRes?.data,
            operations.SimplePathParameterPrimitivesRes
          );
        }
        break;
    }

    return res;
  }
}
