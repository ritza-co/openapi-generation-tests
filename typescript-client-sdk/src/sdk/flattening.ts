/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as utils from "../internal/utils";
import * as operations from "./models/operations";
import { AxiosInstance, AxiosRequestConfig, AxiosResponse } from "axios";

/**
 * Endpoints for testing flattening through request body and parameter combinations.
 */
export class Flattening {
  _defaultClient: AxiosInstance;
  _securityClient: AxiosInstance;
  _serverURL: string;
  _language: string;
  _sdkVersion: string;
  _genVersion: string;
  _globals: any;

  constructor(
    defaultClient: AxiosInstance,
    securityClient: AxiosInstance,
    serverURL: string,
    language: string,
    sdkVersion: string,
    genVersion: string,
    globals: any
  ) {
    this._defaultClient = defaultClient;
    this._securityClient = securityClient;
    this._serverURL = serverURL;
    this._language = language;
    this._sdkVersion = sdkVersion;
    this._genVersion = genVersion;
    this._globals = globals;
  }

  async componentBodyAndParamConflict(
    req: operations.ComponentBodyAndParamConflictRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.ComponentBodyAndParamConflictResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.ComponentBodyAndParamConflictRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string =
      baseURL.replace(/\/$/, "") +
      "/anything/flattening/componentBodyAndParamConflict";

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "simpleObject",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const headers = { ...reqBodyHeaders, ...config?.headers };
    const queryParams: string = utils.serializeQueryParams(req, this._globals);
    if (reqBody == null || Object.keys(reqBody).length === 0)
      throw new Error("request body is required");

    const httpRes: AxiosResponse = await client.request({
      validateStatus: () => true,
      url: url + queryParams,
      method: "post",
      headers: headers,
      data: reqBody,
      ...config,
    });

    const contentType: string = httpRes?.headers?.["content-type"] ?? "";

    if (httpRes?.status == null) {
      throw new Error(`status code not found in response: ${httpRes}`);
    }

    const res: operations.ComponentBodyAndParamConflictResponse =
      new operations.ComponentBodyAndParamConflictResponse({
        statusCode: httpRes.status,
        contentType: contentType,
        rawResponse: httpRes,
      });
    switch (true) {
      case httpRes?.status == 200:
        if (utils.matchContentType(contentType, `application/json`)) {
          res.res = utils.objectToClass(
            httpRes?.data,
            operations.ComponentBodyAndParamConflictRes
          );
        }
        break;
    }

    return res;
  }

  async componentBodyAndParamNoConflict(
    req: operations.ComponentBodyAndParamNoConflictRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.ComponentBodyAndParamNoConflictResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.ComponentBodyAndParamNoConflictRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string =
      baseURL.replace(/\/$/, "") +
      "/anything/flattening/componentBodyAndParamNoConflict";

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "simpleObject",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const headers = { ...reqBodyHeaders, ...config?.headers };
    const queryParams: string = utils.serializeQueryParams(req, this._globals);
    if (reqBody == null || Object.keys(reqBody).length === 0)
      throw new Error("request body is required");

    const httpRes: AxiosResponse = await client.request({
      validateStatus: () => true,
      url: url + queryParams,
      method: "post",
      headers: headers,
      data: reqBody,
      ...config,
    });

    const contentType: string = httpRes?.headers?.["content-type"] ?? "";

    if (httpRes?.status == null) {
      throw new Error(`status code not found in response: ${httpRes}`);
    }

    const res: operations.ComponentBodyAndParamNoConflictResponse =
      new operations.ComponentBodyAndParamNoConflictResponse({
        statusCode: httpRes.status,
        contentType: contentType,
        rawResponse: httpRes,
      });
    switch (true) {
      case httpRes?.status == 200:
        if (utils.matchContentType(contentType, `application/json`)) {
          res.res = utils.objectToClass(
            httpRes?.data,
            operations.ComponentBodyAndParamNoConflictRes
          );
        }
        break;
    }

    return res;
  }

  async conflictingParams(
    req: operations.ConflictingParamsRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.ConflictingParamsResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.ConflictingParamsRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/anything/flattening/conflictingParams/{str}",
      req,
      this._globals
    );

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const queryParams: string = utils.serializeQueryParams(req, this._globals);

    const httpRes: AxiosResponse = await client.request({
      validateStatus: () => true,
      url: url + queryParams,
      method: "get",
      ...config,
    });

    const contentType: string = httpRes?.headers?.["content-type"] ?? "";

    if (httpRes?.status == null) {
      throw new Error(`status code not found in response: ${httpRes}`);
    }

    const res: operations.ConflictingParamsResponse =
      new operations.ConflictingParamsResponse({
        statusCode: httpRes.status,
        contentType: contentType,
        rawResponse: httpRes,
      });
    switch (true) {
      case httpRes?.status == 200:
        if (utils.matchContentType(contentType, `application/json`)) {
          res.res = utils.objectToClass(
            httpRes?.data,
            operations.ConflictingParamsRes
          );
        }
        break;
    }

    return res;
  }

  async inlineBodyAndParamConflict(
    req: operations.InlineBodyAndParamConflictRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.InlineBodyAndParamConflictResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.InlineBodyAndParamConflictRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string =
      baseURL.replace(/\/$/, "") +
      "/anything/flattening/inlineBodyAndParamConflict";

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "requestBody",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const headers = { ...reqBodyHeaders, ...config?.headers };
    const queryParams: string = utils.serializeQueryParams(req, this._globals);
    if (reqBody == null || Object.keys(reqBody).length === 0)
      throw new Error("request body is required");

    const httpRes: AxiosResponse = await client.request({
      validateStatus: () => true,
      url: url + queryParams,
      method: "post",
      headers: headers,
      data: reqBody,
      ...config,
    });

    const contentType: string = httpRes?.headers?.["content-type"] ?? "";

    if (httpRes?.status == null) {
      throw new Error(`status code not found in response: ${httpRes}`);
    }

    const res: operations.InlineBodyAndParamConflictResponse =
      new operations.InlineBodyAndParamConflictResponse({
        statusCode: httpRes.status,
        contentType: contentType,
        rawResponse: httpRes,
      });
    switch (true) {
      case httpRes?.status == 200:
        if (utils.matchContentType(contentType, `application/json`)) {
          res.res = utils.objectToClass(
            httpRes?.data,
            operations.InlineBodyAndParamConflictRes
          );
        }
        break;
    }

    return res;
  }

  async inlineBodyAndParamNoConflict(
    req: operations.InlineBodyAndParamNoConflictRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.InlineBodyAndParamNoConflictResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.InlineBodyAndParamNoConflictRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string =
      baseURL.replace(/\/$/, "") +
      "/anything/flattening/inlineBodyAndParamNoConflict";

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "requestBody",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const headers = { ...reqBodyHeaders, ...config?.headers };
    const queryParams: string = utils.serializeQueryParams(req, this._globals);
    if (reqBody == null || Object.keys(reqBody).length === 0)
      throw new Error("request body is required");

    const httpRes: AxiosResponse = await client.request({
      validateStatus: () => true,
      url: url + queryParams,
      method: "post",
      headers: headers,
      data: reqBody,
      ...config,
    });

    const contentType: string = httpRes?.headers?.["content-type"] ?? "";

    if (httpRes?.status == null) {
      throw new Error(`status code not found in response: ${httpRes}`);
    }

    const res: operations.InlineBodyAndParamNoConflictResponse =
      new operations.InlineBodyAndParamNoConflictResponse({
        statusCode: httpRes.status,
        contentType: contentType,
        rawResponse: httpRes,
      });
    switch (true) {
      case httpRes?.status == 200:
        if (utils.matchContentType(contentType, `application/json`)) {
          res.res = utils.objectToClass(
            httpRes?.data,
            operations.InlineBodyAndParamNoConflictRes
          );
        }
        break;
    }

    return res;
  }
}
