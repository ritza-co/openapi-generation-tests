/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { objectToClass, SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import { SimpleObjectCamelCase } from "./simpleobjectcamelcase";
import { Expose, Transform, Type } from "class-transformer";

export class DeepObjectCamelCase extends SpeakeasyBase {
    @SpeakeasyMetadata()
    @Expose({ name: "any_val" })
    anyVal: any;

    @SpeakeasyMetadata({ elemType: SimpleObjectCamelCase })
    @Expose({ name: "arr_val" })
    @Type(() => SimpleObjectCamelCase)
    arrVal: SimpleObjectCamelCase[];

    @SpeakeasyMetadata()
    @Expose({ name: "bool_val" })
    boolVal: boolean;

    @SpeakeasyMetadata()
    @Expose({ name: "int_val" })
    intVal: number;

    @SpeakeasyMetadata({ elemType: SimpleObjectCamelCase })
    @Expose({ name: "map_val" })
    @Transform(
        ({ value }) => {
            const obj: Record<string, SimpleObjectCamelCase> = {};
            for (const key in value) {
                obj[key] = objectToClass(value[key], SimpleObjectCamelCase);
            }
            return obj;
        },
        { toClassOnly: true }
    )
    mapVal: Record<string, SimpleObjectCamelCase>;

    @SpeakeasyMetadata()
    @Expose({ name: "num_val" })
    numVal: number;

    /**
     * A simple object that uses all our supported primitive types and enums and has optional properties.
     */
    @SpeakeasyMetadata()
    @Expose({ name: "obj_val" })
    @Type(() => SimpleObjectCamelCase)
    objVal: SimpleObjectCamelCase;

    @SpeakeasyMetadata()
    @Expose({ name: "str_val" })
    strVal: string;

    @SpeakeasyMetadata()
    @Expose({ name: "type" })
    type?: string;
}
