/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi;

import java.net.http.HttpResponse;
import org.openapis.openapi.utils.HTTPClient;
import org.openapis.openapi.utils.HTTPRequest;
import org.openapis.openapi.utils.SerializedBody;

/**
 * Endpoints for testing error responses.
 */
public class Errors {
	
    /**
	 * CONNECTION_ERROR_GET_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] CONNECTION_ERROR_GET_SERVERS = {
        "http://somebrokenapi.broken",
    };
	
	private SDKConfiguration sdkConfiguration;

	public Errors(SDKConfiguration sdkConfiguration) {
		this.sdkConfiguration = sdkConfiguration;
	}

    public org.openapis.openapi.models.operations.ConnectionErrorGetResponse connectionErrorGet() throws Exception {
        return this.connectionErrorGet(null);
    }

    public org.openapis.openapi.models.operations.ConnectionErrorGetResponse connectionErrorGet(String serverURL) throws Exception {
        String baseUrl = org.openapis.openapi.utils.Utils.templateUrl(CONNECTION_ERROR_GET_SERVERS[0], new java.util.HashMap<String, String>());
        if (serverURL != null && !serverURL.isBlank()) {
            baseUrl = serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(baseUrl, "/anything/connectionError");
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);

        req.addHeader("Accept", "*/*");
        req.addHeader("x-speakeasy-user-agent", String.format("speakeasy-sdk/%s %s %s", this.sdkConfiguration.language, this.sdkConfiguration.sdkVersion, this.sdkConfiguration.genVersion));
        
        HTTPClient client = this.sdkConfiguration.securityClient;
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.ConnectionErrorGetResponse res = new org.openapis.openapi.models.operations.ConnectionErrorGetResponse(contentType, httpRes.statusCode()) {{
        }};
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
        }

        return res;
    }

    public org.openapis.openapi.models.operations.StatusGetResponse statusGet(Long statusCode) throws Exception {
        org.openapis.openapi.models.operations.StatusGetRequest request = new org.openapis.openapi.models.operations.StatusGetRequest(statusCode);
        
        String baseUrl = org.openapis.openapi.utils.Utils.templateUrl(this.sdkConfiguration.serverUrl, this.sdkConfiguration.getServerVariableDefaults());
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.StatusGetRequest.class, baseUrl, "/status/{statusCode}", request, this.sdkConfiguration.globals);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);

        req.addHeader("Accept", "*/*");
        req.addHeader("x-speakeasy-user-agent", String.format("speakeasy-sdk/%s %s %s", this.sdkConfiguration.language, this.sdkConfiguration.sdkVersion, this.sdkConfiguration.genVersion));
        
        HTTPClient client = this.sdkConfiguration.securityClient;
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.StatusGetResponse res = new org.openapis.openapi.models.operations.StatusGetResponse(contentType, httpRes.statusCode()) {{
        }};
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200 || httpRes.statusCode() == 300 || httpRes.statusCode() == 400 || httpRes.statusCode() == 500) {
        }

        return res;
    }

    public org.openapis.openapi.models.operations.StatusPostRetriesResponse statusPostRetries(Long statusCode) throws Exception {
        return this.statusPostRetries(statusCode, null);
    }

    public org.openapis.openapi.models.operations.StatusPostRetriesResponse statusPostRetries(Long statusCode, org.openapis.openapi.models.shared.SimpleObject simpleObject) throws Exception {
        org.openapis.openapi.models.operations.StatusPostRetriesRequest request = new org.openapis.openapi.models.operations.StatusPostRetriesRequest(statusCode);
        request.simpleObject=simpleObject;
        
        String baseUrl = org.openapis.openapi.utils.Utils.templateUrl(this.sdkConfiguration.serverUrl, this.sdkConfiguration.getServerVariableDefaults());
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.StatusPostRetriesRequest.class, baseUrl, "/status/{statusCode}", request, this.sdkConfiguration.globals);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("POST");
        req.setURL(url);
        SerializedBody serializedRequestBody = org.openapis.openapi.utils.Utils.serializeRequestBody(request, "simpleObject", "json");
        req.setBody(serializedRequestBody);

        req.addHeader("Accept", "*/*");
        req.addHeader("x-speakeasy-user-agent", String.format("speakeasy-sdk/%s %s %s", this.sdkConfiguration.language, this.sdkConfiguration.sdkVersion, this.sdkConfiguration.genVersion));
        
        HTTPClient client = this.sdkConfiguration.securityClient;
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.StatusPostRetriesResponse res = new org.openapis.openapi.models.operations.StatusPostRetriesResponse(contentType, httpRes.statusCode()) {{
        }};
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200 || httpRes.statusCode() == 204 || httpRes.statusCode() == 300 || httpRes.statusCode() == 400 || httpRes.statusCode() == 500) {
        }

        return res;
    }
}