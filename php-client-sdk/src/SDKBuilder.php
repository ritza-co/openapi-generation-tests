<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI;

/**
 * SDKBuilder is used to configure and build an instance of the SDK.
 * 
 * @package OpenAPI\OpenAPI
 */
class SDKBuilder
{
    private ?\GuzzleHttp\ClientInterface $client;
    private ?Models\Shared\Security $security;
    private string $serverUrl;
    /** @var array<string, string> */
    private ?array $params;
    /** @var array<string, array<string, array<string, mixed>>> */
    private ?array $globals;

    public function __construct() {
        $this->client = null;
        $this->security = null;
        $this->serverUrl = '';
        $this->params = null;
        $this->globals = [
            'parameters' => []
        ];
    }

    /**
     * setClient allows setting a custom Guzzle client for the SDK to make requests with.
     *
     * @param \GuzzleHttp\ClientInterface $client
     * @return SDKBuilder
     */
    public function setClient(\GuzzleHttp\ClientInterface $client): SDKBuilder
    {
        $this->client = $client;
        return $this;
    }
    
    /**
     * setSecurity is used to configure the security required for the SDK.
     *
     * @param Models\Shared\Security $security
     * @return SDKBuilder
     */
    public function setSecurity(Models\Shared\Security $security): SDKBuilder
    {
        $this->security = $security;
        return $this;
    }
    
    /**
     * setServerUrl is used to configure the server URL for the SDK, and optionally template any parameters in the URL.
     *
     * @param string $serverUrl
     * @param array<string, string> $params
     * @return SDKBuilder
     */
    public function setServerUrl(string $serverUrl, ?array $params = null): SDKBuilder
    {
        $this->serverUrl = $serverUrl;
        if ($params !== null) {
            $this->params = $params;
        }
        return $this;
    }
    
    /**
     * setGlobalPathParam is used to configure the globalPathParam parameter for the SDK.
     *
     * @param int $globalPathParam
     * @return SDKBuilder
     */
    public function setGlobalPathParam(int $globalPathParam): SDKBuilder
    {
        if (!array_key_exists('pathParam', $this->globals['parameters']))
        {
            $this->globals['parameters']['pathParam'] = [];
        }

        $this->globals['parameters']['pathParam']['globalPathParam'] = $globalPathParam;

        return $this;
    }
    
    /**
     * setGlobalQueryParam is used to configure the globalQueryParam parameter for the SDK.
     *
     * @param string $globalQueryParam
     * @return SDKBuilder
     */
    public function setGlobalQueryParam(string $globalQueryParam): SDKBuilder
    {
        if (!array_key_exists('queryParam', $this->globals['parameters']))
        {
            $this->globals['parameters']['queryParam'] = [];
        }

        $this->globals['parameters']['queryParam']['globalQueryParam'] = $globalQueryParam;

        return $this;
    }
    
    /**
     * build is used to build the SDK with any of the configured options.
     *
     * @return SDK
     */
    public function build(): SDK
    {
        return new SDK($this->client, $this->security, $this->serverUrl, $this->params, $this->globals);
    }
}