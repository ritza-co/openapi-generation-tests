<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI;

class Parameters 
{

	// SDK private variables namespaced with _ to avoid conflicts with API models
	private \GuzzleHttp\ClientInterface $_defaultClient;
	private \GuzzleHttp\ClientInterface $_securityClient;
	private string $_serverUrl;
	private string $_language;
	private string $_sdkVersion;
	private string $_genVersion;
	/** @var array<string, array<string, array<string, string>>> */
	private array $_globals;	

	/**
	 * @param \GuzzleHttp\ClientInterface $defaultClient
	 * @param \GuzzleHttp\ClientInterface $securityClient
	 * @param string $serverUrl
	 * @param string $language
	 * @param string $sdkVersion
	 * @param string $genVersion
	 * @param array<string, array<string, array<string, string>>> $globals
	 */
	public function __construct(\GuzzleHttp\ClientInterface $defaultClient, \GuzzleHttp\ClientInterface $securityClient, string $serverUrl, string $language, string $sdkVersion, string $genVersion, array $globals)
	{
		$this->_defaultClient = $defaultClient;
		$this->_securityClient = $securityClient;
		$this->_serverUrl = $serverUrl;
		$this->_language = $language;
		$this->_sdkVersion = $sdkVersion;
		$this->_genVersion = $genVersion;
		$this->_globals = $globals;
	}
	
    /**
     * deepObjectQueryParamsMap
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DeepObjectQueryParamsMapRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\DeepObjectQueryParamsMapResponse
     */
	public function deepObjectQueryParamsMap(
        \OpenAPI\OpenAPI\Models\Operations\DeepObjectQueryParamsMapRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\DeepObjectQueryParamsMapResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/anything/queryParams/deepObject/map');
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\DeepObjectQueryParamsMapRequest::class, $request, $this->_globals));
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DeepObjectQueryParamsMapResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->res = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\DeepObjectQueryParamsMapRes', 'json');
            }
        }

        return $response;
    }
	
    /**
     * deepObjectQueryParamsObject
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DeepObjectQueryParamsObjectRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\DeepObjectQueryParamsObjectResponse
     */
	public function deepObjectQueryParamsObject(
        \OpenAPI\OpenAPI\Models\Operations\DeepObjectQueryParamsObjectRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\DeepObjectQueryParamsObjectResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/anything/queryParams/deepObject/obj');
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\DeepObjectQueryParamsObjectRequest::class, $request, $this->_globals));
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DeepObjectQueryParamsObjectResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->res = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\DeepObjectQueryParamsObjectRes', 'json');
            }
        }

        return $response;
    }
	
    /**
     * formQueryParamsArray
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\FormQueryParamsArrayRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\FormQueryParamsArrayResponse
     */
	public function formQueryParamsArray(
        \OpenAPI\OpenAPI\Models\Operations\FormQueryParamsArrayRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\FormQueryParamsArrayResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/anything/queryParams/form/array');
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\FormQueryParamsArrayRequest::class, $request, $this->_globals));
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\FormQueryParamsArrayResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->res = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\FormQueryParamsArrayRes', 'json');
            }
        }

        return $response;
    }
	
    /**
     * formQueryParamsMap
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\FormQueryParamsMapRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\FormQueryParamsMapResponse
     */
	public function formQueryParamsMap(
        \OpenAPI\OpenAPI\Models\Operations\FormQueryParamsMapRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\FormQueryParamsMapResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/anything/queryParams/form/map');
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\FormQueryParamsMapRequest::class, $request, $this->_globals));
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\FormQueryParamsMapResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->res = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\FormQueryParamsMapRes', 'json');
            }
        }

        return $response;
    }
	
    /**
     * formQueryParamsObject
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\FormQueryParamsObjectRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\FormQueryParamsObjectResponse
     */
	public function formQueryParamsObject(
        \OpenAPI\OpenAPI\Models\Operations\FormQueryParamsObjectRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\FormQueryParamsObjectResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/anything/queryParams/form/obj');
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\FormQueryParamsObjectRequest::class, $request, $this->_globals));
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\FormQueryParamsObjectResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->res = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\FormQueryParamsObjectRes', 'json');
            }
        }

        return $response;
    }
	
    /**
     * formQueryParamsPrimitive
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\FormQueryParamsPrimitiveRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\FormQueryParamsPrimitiveResponse
     */
	public function formQueryParamsPrimitive(
        \OpenAPI\OpenAPI\Models\Operations\FormQueryParamsPrimitiveRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\FormQueryParamsPrimitiveResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/anything/queryParams/form/primitive');
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\FormQueryParamsPrimitiveRequest::class, $request, $this->_globals));
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\FormQueryParamsPrimitiveResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->res = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\FormQueryParamsPrimitiveRes', 'json');
            }
        }

        return $response;
    }
	
    /**
     * formQueryParamsRefParamObject
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\FormQueryParamsRefParamObjectRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\FormQueryParamsRefParamObjectResponse
     */
	public function formQueryParamsRefParamObject(
        \OpenAPI\OpenAPI\Models\Operations\FormQueryParamsRefParamObjectRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\FormQueryParamsRefParamObjectResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/anything/queryParams/form/refParamObject');
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\FormQueryParamsRefParamObjectRequest::class, $request, $this->_globals));
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\FormQueryParamsRefParamObjectResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->res = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\FormQueryParamsRefParamObjectRes', 'json');
            }
        }

        return $response;
    }
	
    /**
     * headerParamsArray
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\HeaderParamsArrayRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\HeaderParamsArrayResponse
     */
	public function headerParamsArray(
        \OpenAPI\OpenAPI\Models\Operations\HeaderParamsArrayRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\HeaderParamsArrayResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/anything/headers/array');
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\HeaderParamsArrayResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->res = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\HeaderParamsArrayRes', 'json');
            }
        }

        return $response;
    }
	
    /**
     * headerParamsMap
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\HeaderParamsMapRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\HeaderParamsMapResponse
     */
	public function headerParamsMap(
        \OpenAPI\OpenAPI\Models\Operations\HeaderParamsMapRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\HeaderParamsMapResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/anything/headers/map');
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\HeaderParamsMapResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->res = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\HeaderParamsMapRes', 'json');
            }
        }

        return $response;
    }
	
    /**
     * headerParamsObject
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\HeaderParamsObjectRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\HeaderParamsObjectResponse
     */
	public function headerParamsObject(
        \OpenAPI\OpenAPI\Models\Operations\HeaderParamsObjectRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\HeaderParamsObjectResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/anything/headers/obj');
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\HeaderParamsObjectResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->res = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\HeaderParamsObjectRes', 'json');
            }
        }

        return $response;
    }
	
    /**
     * headerParamsPrimitive
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\HeaderParamsPrimitiveRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\HeaderParamsPrimitiveResponse
     */
	public function headerParamsPrimitive(
        \OpenAPI\OpenAPI\Models\Operations\HeaderParamsPrimitiveRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\HeaderParamsPrimitiveResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/anything/headers/primitive');
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\HeaderParamsPrimitiveResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->res = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\HeaderParamsPrimitiveRes', 'json');
            }
        }

        return $response;
    }
	
    /**
     * jsonQueryParamsObject
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\JsonQueryParamsObjectRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\JsonQueryParamsObjectResponse
     */
	public function jsonQueryParamsObject(
        \OpenAPI\OpenAPI\Models\Operations\JsonQueryParamsObjectRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\JsonQueryParamsObjectResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/anything/queryParams/json/obj');
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\JsonQueryParamsObjectRequest::class, $request, $this->_globals));
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\JsonQueryParamsObjectResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->res = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\JsonQueryParamsObjectRes', 'json');
            }
        }

        return $response;
    }
	
    /**
     * mixedQueryParams
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\MixedQueryParamsRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\MixedQueryParamsResponse
     */
	public function mixedQueryParams(
        \OpenAPI\OpenAPI\Models\Operations\MixedQueryParamsRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\MixedQueryParamsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/anything/queryParams/mixed');
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\MixedQueryParamsRequest::class, $request, $this->_globals));
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\MixedQueryParamsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->res = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\MixedQueryParamsRes', 'json');
            }
        }

        return $response;
    }
	
    /**
     * pathParameterJson
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\PathParameterJsonRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\PathParameterJsonResponse
     */
	public function pathParameterJson(
        \OpenAPI\OpenAPI\Models\Operations\PathParameterJsonRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\PathParameterJsonResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/anything/pathParams/json/{jsonObj}', \OpenAPI\OpenAPI\Models\Operations\PathParameterJsonRequest::class, $request, $this->_globals);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\PathParameterJsonResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->res = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\PathParameterJsonRes', 'json');
            }
        }

        return $response;
    }
	
    /**
     * pipeDelimitedQueryParamsArray
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\PipeDelimitedQueryParamsArrayRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\PipeDelimitedQueryParamsArrayResponse
     */
	public function pipeDelimitedQueryParamsArray(
        \OpenAPI\OpenAPI\Models\Operations\PipeDelimitedQueryParamsArrayRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\PipeDelimitedQueryParamsArrayResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/anything/queryParams/pipe/array');
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\PipeDelimitedQueryParamsArrayRequest::class, $request, $this->_globals));
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\PipeDelimitedQueryParamsArrayResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->res = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\PipeDelimitedQueryParamsArrayRes', 'json');
            }
        }

        return $response;
    }
	
    /**
     * simplePathParameterArrays
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\SimplePathParameterArraysRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\SimplePathParameterArraysResponse
     */
	public function simplePathParameterArrays(
        \OpenAPI\OpenAPI\Models\Operations\SimplePathParameterArraysRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\SimplePathParameterArraysResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/anything/pathParams/arr/{arrParam}', \OpenAPI\OpenAPI\Models\Operations\SimplePathParameterArraysRequest::class, $request, $this->_globals);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\SimplePathParameterArraysResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->res = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\SimplePathParameterArraysRes', 'json');
            }
        }

        return $response;
    }
	
    /**
     * simplePathParameterMaps
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\SimplePathParameterMapsRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\SimplePathParameterMapsResponse
     */
	public function simplePathParameterMaps(
        \OpenAPI\OpenAPI\Models\Operations\SimplePathParameterMapsRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\SimplePathParameterMapsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/anything/pathParams/map/{mapParam}/mapExploded/{mapParamExploded}', \OpenAPI\OpenAPI\Models\Operations\SimplePathParameterMapsRequest::class, $request, $this->_globals);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\SimplePathParameterMapsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->res = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\SimplePathParameterMapsRes', 'json');
            }
        }

        return $response;
    }
	
    /**
     * simplePathParameterObjects
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\SimplePathParameterObjectsRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\SimplePathParameterObjectsResponse
     */
	public function simplePathParameterObjects(
        \OpenAPI\OpenAPI\Models\Operations\SimplePathParameterObjectsRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\SimplePathParameterObjectsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/anything/pathParams/obj/{objParam}/objExploded/{objParamExploded}', \OpenAPI\OpenAPI\Models\Operations\SimplePathParameterObjectsRequest::class, $request, $this->_globals);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\SimplePathParameterObjectsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->res = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\SimplePathParameterObjectsRes', 'json');
            }
        }

        return $response;
    }
	
    /**
     * simplePathParameterPrimitives
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\SimplePathParameterPrimitivesRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\SimplePathParameterPrimitivesResponse
     */
	public function simplePathParameterPrimitives(
        \OpenAPI\OpenAPI\Models\Operations\SimplePathParameterPrimitivesRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\SimplePathParameterPrimitivesResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/anything/pathParams/str/{strParam}/bool/{boolParam}/int/{intParam}/num/{numParam}', \OpenAPI\OpenAPI\Models\Operations\SimplePathParameterPrimitivesRequest::class, $request, $this->_globals);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\SimplePathParameterPrimitivesResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->res = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\SimplePathParameterPrimitivesRes', 'json');
            }
        }

        return $response;
    }
}