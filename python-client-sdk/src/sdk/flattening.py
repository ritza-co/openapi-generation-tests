"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

import requests as requests_http
from . import utils
from sdk.models import operations, shared
from typing import Any, Optional

class Flattening:
    r"""Endpoints for testing flattening through request body and parameter combinations."""
    _client: requests_http.Session
    _security_client: requests_http.Session
    _server_url: str
    _language: str
    _sdk_version: str
    _gen_version: str
    _globals: dict[str, dict[str, dict[str, Any]]]

    def __init__(self, client: requests_http.Session, security_client: requests_http.Session, server_url: str, language: str, sdk_version: str, gen_version: str, gbls: dict[str, dict[str, dict[str, Any]]]) -> None:
        self._client = client
        self._security_client = security_client
        self._server_url = server_url
        self._language = language
        self._sdk_version = sdk_version
        self._gen_version = gen_version
        self._globals = gbls
        
    
    def component_body_and_param_conflict(self, simple_object: shared.SimpleObject, str_: str) -> operations.ComponentBodyAndParamConflictResponse:
        request = operations.ComponentBodyAndParamConflictRequest(
            simple_object=simple_object,
            str_=str_,
        )
        
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/anything/flattening/componentBodyAndParamConflict'
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "simple_object", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        query_params = utils.get_query_params(operations.ComponentBodyAndParamConflictRequest, request, self._globals)
        headers['x-speakeasy-user-agent'] = f'speakeasy-sdk/{self._language} {self._sdk_version} {self._gen_version}'
        
        client = self._security_client
        
        http_res = client.request('POST', url, params=query_params, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.ComponentBodyAndParamConflictResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.ComponentBodyAndParamConflictRes])
                res.res = out

        return res

    
    def component_body_and_param_no_conflict(self, param_str: str, simple_object: shared.SimpleObject) -> operations.ComponentBodyAndParamNoConflictResponse:
        request = operations.ComponentBodyAndParamNoConflictRequest(
            param_str=param_str,
            simple_object=simple_object,
        )
        
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/anything/flattening/componentBodyAndParamNoConflict'
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "simple_object", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        query_params = utils.get_query_params(operations.ComponentBodyAndParamNoConflictRequest, request, self._globals)
        headers['x-speakeasy-user-agent'] = f'speakeasy-sdk/{self._language} {self._sdk_version} {self._gen_version}'
        
        client = self._security_client
        
        http_res = client.request('POST', url, params=query_params, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.ComponentBodyAndParamNoConflictResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.ComponentBodyAndParamNoConflictRes])
                res.res = out

        return res

    
    def conflicting_params(self, str_path_parameter: str, str_query_parameter: str) -> operations.ConflictingParamsResponse:
        request = operations.ConflictingParamsRequest(
            str_path_parameter=str_path_parameter,
            str_query_parameter=str_query_parameter,
        )
        
        base_url = self._server_url
        
        url = utils.generate_url(operations.ConflictingParamsRequest, base_url, '/anything/flattening/conflictingParams/{str}', request, self._globals)
        headers = {}
        query_params = utils.get_query_params(operations.ConflictingParamsRequest, request, self._globals)
        headers['x-speakeasy-user-agent'] = f'speakeasy-sdk/{self._language} {self._sdk_version} {self._gen_version}'
        
        client = self._security_client
        
        http_res = client.request('GET', url, params=query_params, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.ConflictingParamsResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.ConflictingParamsRes])
                res.res = out

        return res

    
    def inline_body_and_param_conflict(self, request_body: operations.InlineBodyAndParamConflictRequestBody, str_: str) -> operations.InlineBodyAndParamConflictResponse:
        request = operations.InlineBodyAndParamConflictRequest(
            request_body=request_body,
            str_=str_,
        )
        
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/anything/flattening/inlineBodyAndParamConflict'
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request_body", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        query_params = utils.get_query_params(operations.InlineBodyAndParamConflictRequest, request, self._globals)
        headers['x-speakeasy-user-agent'] = f'speakeasy-sdk/{self._language} {self._sdk_version} {self._gen_version}'
        
        client = self._security_client
        
        http_res = client.request('POST', url, params=query_params, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.InlineBodyAndParamConflictResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.InlineBodyAndParamConflictRes])
                res.res = out

        return res

    
    def inline_body_and_param_no_conflict(self, request_body: operations.InlineBodyAndParamNoConflictRequestBody, param_str: str) -> operations.InlineBodyAndParamNoConflictResponse:
        request = operations.InlineBodyAndParamNoConflictRequest(
            request_body=request_body,
            param_str=param_str,
        )
        
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/anything/flattening/inlineBodyAndParamNoConflict'
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request_body", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        query_params = utils.get_query_params(operations.InlineBodyAndParamNoConflictRequest, request, self._globals)
        headers['x-speakeasy-user-agent'] = f'speakeasy-sdk/{self._language} {self._sdk_version} {self._gen_version}'
        
        client = self._security_client
        
        http_res = client.request('POST', url, params=query_params, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.InlineBodyAndParamNoConflictResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.InlineBodyAndParamNoConflictRes])
                res.res = out

        return res

    