"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

import requests as requests_http
from sdk.models import operations
from typing import Any, Optional

class Servers:
    r"""Endpoints for testing servers."""
    _client: requests_http.Session
    _security_client: requests_http.Session
    _server_url: str
    _language: str
    _sdk_version: str
    _gen_version: str
    _globals: dict[str, dict[str, dict[str, Any]]]

    def __init__(self, client: requests_http.Session, security_client: requests_http.Session, server_url: str, language: str, sdk_version: str, gen_version: str, gbls: dict[str, dict[str, dict[str, Any]]]) -> None:
        self._client = client
        self._security_client = security_client
        self._server_url = server_url
        self._language = language
        self._sdk_version = sdk_version
        self._gen_version = gen_version
        self._globals = gbls
        
    
    def select_global_server(self) -> operations.SelectGlobalServerResponse:
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/anything/selectGlobalServer'
        headers = {}
        headers['Accept'] = '*/*'
        headers['x-speakeasy-user-agent'] = f'speakeasy-sdk/{self._language} {self._sdk_version} {self._gen_version}'
        
        client = self._security_client
        
        http_res = client.request('GET', url, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.SelectGlobalServerResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            res.headers = http_res.headers
            

        return res

    
    def select_server_with_id(self, server_url: Optional[str] = None) -> operations.SelectServerWithIDResponse:
        r"""Select a server by ID."""
        base_url = operations.SELECT_SERVER_WITH_ID_SERVERS[operations.SELECT_SERVER_WITH_ID_SERVER_VALID]
        if server_url is not None:
            base_url = server_url
        
        url = base_url.removesuffix('/') + '/anything/selectServerWithID'
        headers = {}
        headers['Accept'] = '*/*'
        headers['x-speakeasy-user-agent'] = f'speakeasy-sdk/{self._language} {self._sdk_version} {self._gen_version}'
        
        client = self._security_client
        
        http_res = client.request('GET', url, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.SelectServerWithIDResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    
    def server_with_templates(self, server_url: Optional[str] = None) -> operations.ServerWithTemplatesResponse:
        base_url = operations.SERVER_WITH_TEMPLATES_SERVERS[0]
        if server_url is not None:
            base_url = server_url
        
        url = base_url.removesuffix('/') + '/anything/serverWithTemplates'
        headers = {}
        headers['Accept'] = '*/*'
        headers['x-speakeasy-user-agent'] = f'speakeasy-sdk/{self._language} {self._sdk_version} {self._gen_version}'
        
        client = self._security_client
        
        http_res = client.request('GET', url, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.ServerWithTemplatesResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    
    def server_with_templates_global(self) -> operations.ServerWithTemplatesGlobalResponse:
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/anything/serverWithTemplatesGlobal'
        headers = {}
        headers['Accept'] = '*/*'
        headers['x-speakeasy-user-agent'] = f'speakeasy-sdk/{self._language} {self._sdk_version} {self._gen_version}'
        
        client = self._security_client
        
        http_res = client.request('GET', url, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.ServerWithTemplatesGlobalResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    