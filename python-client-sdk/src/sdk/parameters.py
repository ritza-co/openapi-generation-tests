"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

import requests as requests_http
from . import utils
from sdk.models import operations
from typing import Any, Optional

class Parameters:
    r"""Endpoints for testing parameters."""
    _client: requests_http.Session
    _security_client: requests_http.Session
    _server_url: str
    _language: str
    _sdk_version: str
    _gen_version: str
    _globals: dict[str, dict[str, dict[str, Any]]]

    def __init__(self, client: requests_http.Session, security_client: requests_http.Session, server_url: str, language: str, sdk_version: str, gen_version: str, gbls: dict[str, dict[str, dict[str, Any]]]) -> None:
        self._client = client
        self._security_client = security_client
        self._server_url = server_url
        self._language = language
        self._sdk_version = sdk_version
        self._gen_version = gen_version
        self._globals = gbls
        
    
    def deep_object_query_params_map(self, request: operations.DeepObjectQueryParamsMapRequest) -> operations.DeepObjectQueryParamsMapResponse:
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/anything/queryParams/deepObject/map'
        
        query_params = utils.get_query_params(operations.DeepObjectQueryParamsMapRequest, request, self._globals)
        
        client = self._security_client
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.DeepObjectQueryParamsMapResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.DeepObjectQueryParamsMapRes])
                res.res = out

        return res

    
    def deep_object_query_params_object(self, request: operations.DeepObjectQueryParamsObjectRequest) -> operations.DeepObjectQueryParamsObjectResponse:
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/anything/queryParams/deepObject/obj'
        
        query_params = utils.get_query_params(operations.DeepObjectQueryParamsObjectRequest, request, self._globals)
        
        client = self._security_client
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.DeepObjectQueryParamsObjectResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.DeepObjectQueryParamsObjectRes])
                res.res = out

        return res

    
    def form_query_params_array(self, request: operations.FormQueryParamsArrayRequest) -> operations.FormQueryParamsArrayResponse:
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/anything/queryParams/form/array'
        
        query_params = utils.get_query_params(operations.FormQueryParamsArrayRequest, request, self._globals)
        
        client = self._security_client
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.FormQueryParamsArrayResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.FormQueryParamsArrayRes])
                res.res = out

        return res

    
    def form_query_params_map(self, request: operations.FormQueryParamsMapRequest) -> operations.FormQueryParamsMapResponse:
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/anything/queryParams/form/map'
        
        query_params = utils.get_query_params(operations.FormQueryParamsMapRequest, request, self._globals)
        
        client = self._security_client
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.FormQueryParamsMapResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.FormQueryParamsMapRes])
                res.res = out

        return res

    
    def form_query_params_object(self, request: operations.FormQueryParamsObjectRequest) -> operations.FormQueryParamsObjectResponse:
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/anything/queryParams/form/obj'
        
        query_params = utils.get_query_params(operations.FormQueryParamsObjectRequest, request, self._globals)
        
        client = self._security_client
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.FormQueryParamsObjectResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.FormQueryParamsObjectRes])
                res.res = out

        return res

    
    def form_query_params_primitive(self, request: operations.FormQueryParamsPrimitiveRequest) -> operations.FormQueryParamsPrimitiveResponse:
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/anything/queryParams/form/primitive'
        
        query_params = utils.get_query_params(operations.FormQueryParamsPrimitiveRequest, request, self._globals)
        
        client = self._security_client
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.FormQueryParamsPrimitiveResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.FormQueryParamsPrimitiveRes])
                res.res = out

        return res

    
    def form_query_params_ref_param_object(self, request: operations.FormQueryParamsRefParamObjectRequest) -> operations.FormQueryParamsRefParamObjectResponse:
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/anything/queryParams/form/refParamObject'
        
        query_params = utils.get_query_params(operations.FormQueryParamsRefParamObjectRequest, request, self._globals)
        
        client = self._security_client
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.FormQueryParamsRefParamObjectResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.FormQueryParamsRefParamObjectRes])
                res.res = out

        return res

    
    def header_params_array(self, request: operations.HeaderParamsArrayRequest) -> operations.HeaderParamsArrayResponse:
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/anything/headers/array'
        
        headers = utils.get_headers(request)
        
        client = self._security_client
        
        http_res = client.request('GET', url, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.HeaderParamsArrayResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.HeaderParamsArrayRes])
                res.res = out

        return res

    
    def header_params_map(self, request: operations.HeaderParamsMapRequest) -> operations.HeaderParamsMapResponse:
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/anything/headers/map'
        
        headers = utils.get_headers(request)
        
        client = self._security_client
        
        http_res = client.request('GET', url, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.HeaderParamsMapResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.HeaderParamsMapRes])
                res.res = out

        return res

    
    def header_params_object(self, request: operations.HeaderParamsObjectRequest) -> operations.HeaderParamsObjectResponse:
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/anything/headers/obj'
        
        headers = utils.get_headers(request)
        
        client = self._security_client
        
        http_res = client.request('GET', url, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.HeaderParamsObjectResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.HeaderParamsObjectRes])
                res.res = out

        return res

    
    def header_params_primitive(self, request: operations.HeaderParamsPrimitiveRequest) -> operations.HeaderParamsPrimitiveResponse:
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/anything/headers/primitive'
        
        headers = utils.get_headers(request)
        
        client = self._security_client
        
        http_res = client.request('GET', url, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.HeaderParamsPrimitiveResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.HeaderParamsPrimitiveRes])
                res.res = out

        return res

    
    def json_query_params_object(self, request: operations.JSONQueryParamsObjectRequest) -> operations.JSONQueryParamsObjectResponse:
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/anything/queryParams/json/obj'
        
        query_params = utils.get_query_params(operations.JSONQueryParamsObjectRequest, request, self._globals)
        
        client = self._security_client
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.JSONQueryParamsObjectResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.JSONQueryParamsObjectRes])
                res.res = out

        return res

    
    def mixed_query_params(self, request: operations.MixedQueryParamsRequest) -> operations.MixedQueryParamsResponse:
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/anything/queryParams/mixed'
        
        query_params = utils.get_query_params(operations.MixedQueryParamsRequest, request, self._globals)
        
        client = self._security_client
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.MixedQueryParamsResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.MixedQueryParamsRes])
                res.res = out

        return res

    
    def path_parameter_json(self, request: operations.PathParameterJSONRequest) -> operations.PathParameterJSONResponse:
        base_url = self._server_url
        
        url = utils.generate_url(operations.PathParameterJSONRequest, base_url, '/anything/pathParams/json/{jsonObj}', request, self._globals)
        
        
        client = self._security_client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.PathParameterJSONResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.PathParameterJSONRes])
                res.res = out

        return res

    
    def pipe_delimited_query_params_array(self, request: operations.PipeDelimitedQueryParamsArrayRequest) -> operations.PipeDelimitedQueryParamsArrayResponse:
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/anything/queryParams/pipe/array'
        
        query_params = utils.get_query_params(operations.PipeDelimitedQueryParamsArrayRequest, request, self._globals)
        
        client = self._security_client
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.PipeDelimitedQueryParamsArrayResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.PipeDelimitedQueryParamsArrayRes])
                res.res = out

        return res

    
    def simple_path_parameter_arrays(self, request: operations.SimplePathParameterArraysRequest) -> operations.SimplePathParameterArraysResponse:
        base_url = self._server_url
        
        url = utils.generate_url(operations.SimplePathParameterArraysRequest, base_url, '/anything/pathParams/arr/{arrParam}', request, self._globals)
        
        
        client = self._security_client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.SimplePathParameterArraysResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.SimplePathParameterArraysRes])
                res.res = out

        return res

    
    def simple_path_parameter_maps(self, request: operations.SimplePathParameterMapsRequest) -> operations.SimplePathParameterMapsResponse:
        base_url = self._server_url
        
        url = utils.generate_url(operations.SimplePathParameterMapsRequest, base_url, '/anything/pathParams/map/{mapParam}/mapExploded/{mapParamExploded}', request, self._globals)
        
        
        client = self._security_client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.SimplePathParameterMapsResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.SimplePathParameterMapsRes])
                res.res = out

        return res

    
    def simple_path_parameter_objects(self, request: operations.SimplePathParameterObjectsRequest) -> operations.SimplePathParameterObjectsResponse:
        base_url = self._server_url
        
        url = utils.generate_url(operations.SimplePathParameterObjectsRequest, base_url, '/anything/pathParams/obj/{objParam}/objExploded/{objParamExploded}', request, self._globals)
        
        
        client = self._security_client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.SimplePathParameterObjectsResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.SimplePathParameterObjectsRes])
                res.res = out

        return res

    
    def simple_path_parameter_primitives(self, request: operations.SimplePathParameterPrimitivesRequest) -> operations.SimplePathParameterPrimitivesResponse:
        base_url = self._server_url
        
        url = utils.generate_url(operations.SimplePathParameterPrimitivesRequest, base_url, '/anything/pathParams/str/{strParam}/bool/{boolParam}/int/{intParam}/num/{numParam}', request, self._globals)
        
        
        client = self._security_client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.SimplePathParameterPrimitivesResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.SimplePathParameterPrimitivesRes])
                res.res = out

        return res

    