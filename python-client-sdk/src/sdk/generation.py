"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

import requests as requests_http
from . import utils
from sdk.models import operations, shared
from typing import Any, Optional

class Generation:
    r"""Endpoints for purely testing valid generation behavior."""
    _client: requests_http.Session
    _security_client: requests_http.Session
    _server_url: str
    _language: str
    _sdk_version: str
    _gen_version: str
    _globals: dict[str, dict[str, dict[str, Any]]]

    def __init__(self, client: requests_http.Session, security_client: requests_http.Session, server_url: str, language: str, sdk_version: str, gen_version: str, gbls: dict[str, dict[str, dict[str, Any]]]) -> None:
        self._client = client
        self._security_client = security_client
        self._server_url = server_url
        self._language = language
        self._sdk_version = sdk_version
        self._gen_version = gen_version
        self._globals = gbls
        
    
    def anchor_types_get(self) -> operations.AnchorTypesGetResponse:
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/anything/anchorTypes'
        headers = {}
        headers['user-agent'] = f'speakeasy-sdk/{self._language} {self._sdk_version} {self._gen_version}'
        
        client = self._security_client
        
        http_res = client.request('GET', url, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.AnchorTypesGetResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.TypeFromAnchor])
                res.type_from_anchor = out

        return res

    
    def circular_reference_get(self) -> operations.CircularReferenceGetResponse:
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/anything/circularReference'
        headers = {}
        headers['user-agent'] = f'speakeasy-sdk/{self._language} {self._sdk_version} {self._gen_version}'
        
        client = self._security_client
        
        http_res = client.request('GET', url, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.CircularReferenceGetResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ValidCircularReferenceObject])
                res.valid_circular_reference_object = out

        return res

    
    def deprecated_no_comments_get(self, deprecated_parameter: Optional[str] = None) -> operations.DeprecatedNoCommentsGetResponse:
        r"""Deprecated: this method will be removed in a future release, please migrate away from it as soon as possible"""
        request = operations.DeprecatedNoCommentsGetRequest(
            deprecated_parameter=deprecated_parameter,
        )
        
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/anything/deprecatedNoComments'
        headers = {}
        query_params = utils.get_query_params(operations.DeprecatedNoCommentsGetRequest, request, self._globals)
        headers['user-agent'] = f'speakeasy-sdk/{self._language} {self._sdk_version} {self._gen_version}'
        
        client = self._security_client
        
        http_res = client.request('GET', url, params=query_params, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.DeprecatedNoCommentsGetResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    
    def deprecated_with_comments_get(self, deprecated_parameter: Optional[str] = None) -> operations.DeprecatedWithCommentsGetResponse:
        r"""This is an endpoint setup to test deprecation with comments
        
        Deprecated: this method will be removed in a future release, please migrate away from it as soon as possible
        """
        request = operations.DeprecatedWithCommentsGetRequest(
            deprecated_parameter=deprecated_parameter,
        )
        
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/anything/deprecatedWithComments'
        headers = {}
        query_params = utils.get_query_params(operations.DeprecatedWithCommentsGetRequest, request, self._globals)
        headers['user-agent'] = f'speakeasy-sdk/{self._language} {self._sdk_version} {self._gen_version}'
        
        client = self._security_client
        
        http_res = client.request('GET', url, params=query_params, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.DeprecatedWithCommentsGetResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    
    def global_name_overridden(self) -> operations.GetGlobalNameOverrideResponse:
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/anything/globalNameOverride'
        headers = {}
        headers['user-agent'] = f'speakeasy-sdk/{self._language} {self._sdk_version} {self._gen_version}'
        
        client = self._security_client
        
        http_res = client.request('GET', url, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetGlobalNameOverrideResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.GetGlobalNameOverride200ApplicationJSON])
                res.get_global_name_override_200_application_json_object = out

        return res

    
    def ignored_generation_get(self) -> operations.IgnoredGenerationGetResponse:
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/anything/ignoredGeneration'
        headers = {}
        headers['user-agent'] = f'speakeasy-sdk/{self._language} {self._sdk_version} {self._gen_version}'
        
        client = self._security_client
        
        http_res = client.request('GET', url, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.IgnoredGenerationGetResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.IgnoredGenerationGet200ApplicationJSON])
                res.ignored_generation_get_200_application_json_object = out

        return res

    
    def ignores_post(self, request_body: Optional[operations.IgnoresPostApplicationJSON] = None, test_param: Optional[str] = None) -> operations.IgnoresPostResponse:
        request = operations.IgnoresPostRequest(
            request_body=request_body,
            test_param=test_param,
        )
        
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/anything/ignores'
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request_body", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        query_params = utils.get_query_params(operations.IgnoresPostRequest, request, self._globals)
        headers['user-agent'] = f'speakeasy-sdk/{self._language} {self._sdk_version} {self._gen_version}'
        
        client = self._security_client
        
        http_res = client.request('POST', url, params=query_params, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.IgnoresPostResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.HTTPBinSimpleJSONObject])
                res.http_bin_simple_json_object = out

        return res

    
    def name_override(self, test_query_param: str) -> operations.NameOverrideGetResponse:
        request = operations.NameOverrideGetRequest(
            test_query_param=test_query_param,
        )
        
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/anything/nameOverride'
        headers = {}
        query_params = utils.get_query_params(operations.NameOverrideGetRequest, request, self._globals)
        headers['user-agent'] = f'speakeasy-sdk/{self._language} {self._sdk_version} {self._gen_version}'
        
        client = self._security_client
        
        http_res = client.request('GET', url, params=query_params, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.NameOverrideGetResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.OverridenResponse])
                res.overriden_response = out

        return res

    
    def usage_example_post(self, request: operations.UsageExamplePostRequest, security: operations.UsageExamplePostSecurity) -> operations.UsageExamplePostResponse:
        r"""An operation used for testing usage examples
        An operation used for testing usage examples that includes a large array of parameters and input types to ensure that all are handled correctly
        https://docs.example.com - Usage example docs
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/anything/usageExample'
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request_body", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        query_params = utils.get_query_params(operations.UsageExamplePostRequest, request, self._globals)
        headers['user-agent'] = f'speakeasy-sdk/{self._language} {self._sdk_version} {self._gen_version}'
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, params=query_params, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.UsageExamplePostResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.UsageExamplePost200ApplicationJSON])
                res.usage_example_post_200_application_json_object = out

        return res

    