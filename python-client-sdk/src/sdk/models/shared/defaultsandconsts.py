"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import dateutil.parser
from dataclasses_json import Undefined, dataclass_json
from datetime import date, datetime
from decimal import Decimal
from enum import Enum
from sdk import utils
from typing import Optional

class DefaultsAndConstsConstEnumInt(int, Enum):
    ONE = 1
    TWO = 2
    THREE = 3

class DefaultsAndConstsConstEnumStr(str, Enum):
    ONE = 'one'
    TWO = 'two'
    THREE = 'three'

class DefaultsAndConstsDefaultEnumInt(int, Enum):
    ONE = 1
    TWO = 2
    THREE = 3

class DefaultsAndConstsDefaultEnumStr(str, Enum):
    ONE = 'one'
    TWO = 'two'
    THREE = 'three'

class DefaultsAndConstsSingleEnumConstStr(str, Enum):
    ONE = 'one'


@dataclass_json(undefined=Undefined.EXCLUDE)

@dataclasses.dataclass
class DefaultsAndConsts:
    const_big_int: int = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('constBigInt') }})
    const_big_int_str: int = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('constBigIntStr'), 'encoder': utils.bigintencoder(False), 'decoder': utils.bigintdecoder }})
    const_bool: bool = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('constBool') }})
    const_date: date = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('constDate'), 'encoder': utils.dateisoformat(False), 'decoder': utils.datefromisoformat }})
    const_date_time: datetime = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('constDateTime'), 'encoder': utils.datetimeisoformat(False), 'decoder': dateutil.parser.isoparse }})
    const_decimal: Decimal = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('constDecimal'), 'encoder': utils.decimalencoder(False, False), 'decoder': utils.decimaldecoder }})
    const_decimal_str: Decimal = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('constDecimalStr'), 'encoder': utils.decimalencoder(False, True), 'decoder': utils.decimaldecoder }})
    const_enum_int: DefaultsAndConstsConstEnumInt = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('constEnumInt') }})
    const_enum_str: DefaultsAndConstsConstEnumStr = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('constEnumStr') }})
    const_int: int = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('constInt') }})
    const_num: float = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('constNum') }})
    const_str: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('constStr') }})
    const_str_null: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('constStrNull') }})
    normal_field: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('normalField') }})
    single_enum_const_bool: bool = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('singleEnumConstBool') }})
    single_enum_const_str: DefaultsAndConstsSingleEnumConstStr = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('singleEnumConstStr') }})
    default_big_int: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('defaultBigInt'), 'exclude': lambda f: f is None }})
    default_big_int_str: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('defaultBigIntStr'), 'encoder': utils.bigintencoder(True), 'decoder': utils.bigintdecoder, 'exclude': lambda f: f is None }})
    default_bool: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('defaultBool'), 'exclude': lambda f: f is None }})
    default_date: Optional[date] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('defaultDate'), 'encoder': utils.dateisoformat(True), 'decoder': utils.datefromisoformat, 'exclude': lambda f: f is None }})
    default_date_time: Optional[datetime] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('defaultDateTime'), 'encoder': utils.datetimeisoformat(True), 'decoder': dateutil.parser.isoparse, 'exclude': lambda f: f is None }})
    default_decimal: Optional[Decimal] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('defaultDecimal'), 'encoder': utils.decimalencoder(True, False), 'decoder': utils.decimaldecoder, 'exclude': lambda f: f is None }})
    default_decimal_str: Optional[Decimal] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('defaultDecimalStr'), 'encoder': utils.decimalencoder(True, True), 'decoder': utils.decimaldecoder, 'exclude': lambda f: f is None }})
    default_enum_int: Optional[DefaultsAndConstsDefaultEnumInt] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('defaultEnumInt'), 'exclude': lambda f: f is None }})
    default_enum_str: Optional[DefaultsAndConstsDefaultEnumStr] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('defaultEnumStr'), 'exclude': lambda f: f is None }})
    default_int: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('defaultInt'), 'exclude': lambda f: f is None }})
    default_num: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('defaultNum'), 'exclude': lambda f: f is None }})
    default_str: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('defaultStr'), 'exclude': lambda f: f is None }})
    default_str_nullable: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('defaultStrNullable'), 'exclude': lambda f: f is None }})
    default_str_optional: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('defaultStrOptional'), 'exclude': lambda f: f is None }})
    

